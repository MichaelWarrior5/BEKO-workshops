
W2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000183  0800751c  0800751c  0000851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080076a0  080076a0  000086a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080076a8  080076a8  000086a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080076ac  080076ac  000086ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000000  080076b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000234  20000068  08007718  00009068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000029c  08007718  0000929c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012b7a  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024ba  00000000  00000000  0001bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001010  00000000  00000000  0001e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c4d  00000000  00000000  0001f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002e966  00000000  00000000  0001fd35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013aeb  00000000  00000000  0004e69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00122c4b  00000000  00000000  00062186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00184dd1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b24  00000000  00000000  00184e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  00189938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	08007504 	.word	0x08007504

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	08007504 	.word	0x08007504

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000598:	1d39      	adds	r1, r7, #4
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	2201      	movs	r2, #1
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <__io_putchar+0x20>)
 80005a2:	f005 fb25 	bl	8005bf0 <HAL_UART_Transmit>
	return 1;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000b4 	.word	0x200000b4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fbc7 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 80005be:	f000 f8b9 	bl	8000734 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f84d 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f98f 	bl	80008e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ca:	f000 f941 	bl	8000850 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80005ce:	f000 f8bd 	bl	800074c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef myTime;
  myTime.Hours = (uint8_t) 18;
 80005d2:	2312      	movs	r3, #18
 80005d4:	713b      	strb	r3, [r7, #4]
  myTime.Minutes = (uint8_t) 50;
 80005d6:	2332      	movs	r3, #50	@ 0x32
 80005d8:	717b      	strb	r3, [r7, #5]
  myTime.Seconds = (uint8_t) 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	71bb      	strb	r3, [r7, #6]
  RTC_DateTypeDef myDate;
  myDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80005de:	2302      	movs	r3, #2
 80005e0:	703b      	strb	r3, [r7, #0]
  myDate.Month = RTC_MONTH_MARCH;
 80005e2:	2303      	movs	r3, #3
 80005e4:	707b      	strb	r3, [r7, #1]
  myDate.Date = 3;
 80005e6:	2303      	movs	r3, #3
 80005e8:	70bb      	strb	r3, [r7, #2]
  myDate.Year = 25;
 80005ea:	2319      	movs	r3, #25
 80005ec:	70fb      	strb	r3, [r7, #3]
  HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	4816      	ldr	r0, [pc, #88]	@ (8000650 <main+0x9c>)
 80005f6:	f004 ffb3 	bl	8005560 <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	4619      	mov	r1, r3
 8000600:	4813      	ldr	r0, [pc, #76]	@ (8000650 <main+0x9c>)
 8000602:	f005 f8bb 	bl	800577c <HAL_RTC_SetDate>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //char buffer[50];

	  HAL_RTC_GetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	@ (8000650 <main+0x9c>)
 800060e:	f005 f843 	bl	8005698 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	480d      	ldr	r0, [pc, #52]	@ (8000650 <main+0x9c>)
 800061a:	f005 f935 	bl	8005888 <HAL_RTC_GetDate>
	  printf("Hello there\n\r");
 800061e:	480d      	ldr	r0, [pc, #52]	@ (8000654 <main+0xa0>)
 8000620:	f006 f8f0 	bl	8006804 <iprintf>
	  printf("-> Time Value: %02d:%02d:%02d\n\r", myTime.Hours, myTime.Minutes, myTime.Seconds);
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	4619      	mov	r1, r3
 8000628:	797b      	ldrb	r3, [r7, #5]
 800062a:	461a      	mov	r2, r3
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	480a      	ldr	r0, [pc, #40]	@ (8000658 <main+0xa4>)
 8000630:	f006 f8e8 	bl	8006804 <iprintf>
	  printf("Today is: %02d.%02d.20%02d\n\r", myDate.Date, myDate.Month, myDate.Year);
 8000634:	78bb      	ldrb	r3, [r7, #2]
 8000636:	4619      	mov	r1, r3
 8000638:	787b      	ldrb	r3, [r7, #1]
 800063a:	461a      	mov	r2, r3
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	4807      	ldr	r0, [pc, #28]	@ (800065c <main+0xa8>)
 8000640:	f006 f8e0 	bl	8006804 <iprintf>
	  //sprintf(buffer, "-> Time Value: %02d:%02d:%02d\n\r", myTime.Hours, myTime.Minutes, myTime.Seconds);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
	  HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000648:	f000 fc46 	bl	8000ed8 <HAL_Delay>
  {
 800064c:	bf00      	nop
 800064e:	e7da      	b.n	8000606 <main+0x52>
 8000650:	20000084 	.word	0x20000084
 8000654:	0800751c 	.word	0x0800751c
 8000658:	0800752c 	.word	0x0800752c
 800065c:	0800754c 	.word	0x0800754c

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09e      	sub	sp, #120	@ 0x78
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	2260      	movs	r2, #96	@ 0x60
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f91d 	bl	80068ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
 8000682:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000684:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000688:	f000 ff9a 	bl	80015c0 <HAL_PWREx_ControlVoltageScaling>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000692:	f000 f953 	bl	800093c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000696:	f000 ff83 	bl	80015a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <SystemClock_Config+0xd0>)
 800069c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80006a0:	4a23      	ldr	r2, [pc, #140]	@ (8000730 <SystemClock_Config+0xd0>)
 80006a2:	f023 0318 	bic.w	r3, r3, #24
 80006a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006aa:	2314      	movs	r3, #20
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ae:	2381      	movs	r3, #129	@ 0x81
 80006b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c2:	2301      	movs	r3, #1
 80006c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80006c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80006cc:	2303      	movs	r3, #3
 80006ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80006e0:	230c      	movs	r3, #12
 80006e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f843 	bl	8001778 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f8:	f000 f920 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	231f      	movs	r3, #31
 80006fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000704:	2308      	movs	r3, #8
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	2101      	movs	r1, #1
 8000718:	4618      	mov	r0, r3
 800071a:	f001 ff09 	bl	8002530 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000724:	f000 f90a 	bl	800093c <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3778      	adds	r7, #120	@ 0x78
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	46020c00 	.word	0x46020c00

08000734 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000738:	2002      	movs	r0, #2
 800073a:	f000 ffcd 	bl	80016d8 <HAL_PWREx_ConfigSupply>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000744:	f000 f8fa 	bl	800093c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	@ 0x38
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800077a:	4b33      	ldr	r3, [pc, #204]	@ (8000848 <MX_RTC_Init+0xfc>)
 800077c:	4a33      	ldr	r2, [pc, #204]	@ (800084c <MX_RTC_Init+0x100>)
 800077e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000780:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <MX_RTC_Init+0xfc>)
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000786:	4b30      	ldr	r3, [pc, #192]	@ (8000848 <MX_RTC_Init+0xfc>)
 8000788:	227f      	movs	r2, #127	@ 0x7f
 800078a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800078c:	4b2e      	ldr	r3, [pc, #184]	@ (8000848 <MX_RTC_Init+0xfc>)
 800078e:	22ff      	movs	r2, #255	@ 0xff
 8000790:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000792:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <MX_RTC_Init+0xfc>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000798:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <MX_RTC_Init+0xfc>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800079e:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <MX_RTC_Init+0xfc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007a4:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <MX_RTC_Init+0xfc>)
 80007a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007ac:	4b26      	ldr	r3, [pc, #152]	@ (8000848 <MX_RTC_Init+0xfc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80007b2:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <MX_RTC_Init+0xfc>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b8:	4823      	ldr	r0, [pc, #140]	@ (8000848 <MX_RTC_Init+0xfc>)
 80007ba:	f004 fe47 	bl	800544c <HAL_RTC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80007c4:	f000 f8ba 	bl	800093c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	481a      	ldr	r0, [pc, #104]	@ (8000848 <MX_RTC_Init+0xfc>)
 80007e0:	f005 f988 	bl	8005af4 <HAL_RTCEx_PrivilegeModeSet>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80007ea:	f000 f8a7 	bl	800093c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 80007ee:	2311      	movs	r3, #17
 80007f0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 45;
 80007f2:	232d      	movs	r3, #45	@ 0x2d
 80007f4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	480f      	ldr	r0, [pc, #60]	@ (8000848 <MX_RTC_Init+0xfc>)
 800080c:	f004 fea8 	bl	8005560 <HAL_RTC_SetTime>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000816:	f000 f891 	bl	800093c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800081a:	2302      	movs	r3, #2
 800081c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_MARCH;
 800081e:	2303      	movs	r3, #3
 8000820:	717b      	strb	r3, [r7, #5]
  sDate.Date = 3;
 8000822:	2303      	movs	r3, #3
 8000824:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_RTC_Init+0xfc>)
 8000832:	f004 ffa3 	bl	800577c <HAL_RTC_SetDate>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 800083c:	f000 f87e 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3738      	adds	r7, #56	@ 0x38
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000084 	.word	0x20000084
 800084c:	46007800 	.word	0x46007800

08000850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000854:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 8000856:	4a23      	ldr	r2, [pc, #140]	@ (80008e4 <MX_USART1_UART_Init+0x94>)
 8000858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000898:	4811      	ldr	r0, [pc, #68]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 800089a:	f005 f959 	bl	8005b50 <HAL_UART_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a4:	f000 f84a 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 80008ac:	f005 fe1e 	bl	80064ec <HAL_UARTEx_SetTxFifoThreshold>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 f841 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 80008be:	f005 fe53 	bl	8006568 <HAL_UARTEx_SetRxFifoThreshold>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008c8:	f000 f838 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <MX_USART1_UART_Init+0x90>)
 80008ce:	f005 fdd4 	bl	800647a <HAL_UARTEx_DisableFifoMode>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 f830 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000b4 	.word	0x200000b4
 80008e4:	40013800 	.word	0x40013800

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_GPIO_Init+0x50>)
 80008f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f4:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <MX_GPIO_Init+0x50>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_GPIO_Init+0x50>)
 8000900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <MX_GPIO_Init+0x50>)
 800090e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000912:	4a09      	ldr	r2, [pc, #36]	@ (8000938 <MX_GPIO_Init+0x50>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_GPIO_Init+0x50>)
 800091e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	46020c00 	.word	0x46020c00

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <HAL_MspInit+0x30>)
 8000950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000954:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x30>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x30>)
 8000960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	46020c00 	.word	0x46020c00

0800097c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b0b4      	sub	sp, #208	@ 0xd0
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	22c0      	movs	r2, #192	@ 0xc0
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f005 ff8e 	bl	80068ae <memset>
  if(hrtc->Instance==RTC)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a1d      	ldr	r2, [pc, #116]	@ (8000a0c <HAL_RTC_MspInit+0x90>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d132      	bne.n	8000a02 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800099c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 f98b 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80009c0:	f7ff ffbc 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_RTC_MspInit+0x94>)
 80009c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80009ca:	4a11      	ldr	r2, [pc, #68]	@ (8000a10 <HAL_RTC_MspInit+0x94>)
 80009cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <HAL_RTC_MspInit+0x94>)
 80009d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80009da:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <HAL_RTC_MspInit+0x94>)
 80009dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009e0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_RTC_MspInit+0x94>)
 80009e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80009f2:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <HAL_RTC_MspInit+0x94>)
 80009f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009f8:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <HAL_RTC_MspInit+0x94>)
 80009fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a02:	bf00      	nop
 8000a04:	37d0      	adds	r7, #208	@ 0xd0
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	46007800 	.word	0x46007800
 8000a10:	46020c00 	.word	0x46020c00

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ba      	sub	sp, #232	@ 0xe8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	22c0      	movs	r2, #192	@ 0xc0
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f005 ff3a 	bl	80068ae <memset>
  if(huart->Instance==USART1)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a26      	ldr	r2, [pc, #152]	@ (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d145      	bne.n	8000ad0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a44:	f04f 0201 	mov.w	r2, #1
 8000a48:	f04f 0300 	mov.w	r3, #0
 8000a4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a50:	2300      	movs	r3, #0
 8000a52:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 f939 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000a64:	f7ff ff6a 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_UART_MspInit+0xc8>)
 8000a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000adc <HAL_UART_MspInit+0xc8>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a74:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_UART_MspInit+0xc8>)
 8000a7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_UART_MspInit+0xc8>)
 8000a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a8c:	4a13      	ldr	r2, [pc, #76]	@ (8000adc <HAL_UART_MspInit+0xc8>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_UART_MspInit+0xc8>)
 8000a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <HAL_UART_MspInit+0xcc>)
 8000acc:	f000 fb90 	bl	80011f0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ad0:	bf00      	nop
 8000ad2:	37e8      	adds	r7, #232	@ 0xe8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40013800 	.word	0x40013800
 8000adc:	46020c00 	.word	0x46020c00
 8000ae0:	42020000 	.word	0x42020000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f9ad 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e00a      	b.n	8000b6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b54:	f3af 8000 	nop.w
 8000b58:	4601      	mov	r1, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	60ba      	str	r2, [r7, #8]
 8000b60:	b2ca      	uxtb	r2, r1
 8000b62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	3301      	adds	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <_read+0x12>
  }

  return len;
 8000b72:	687b      	ldr	r3, [r7, #4]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e009      	b.n	8000ba2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	60ba      	str	r2, [r7, #8]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fcfa 	bl	8000590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dbf1      	blt.n	8000b8e <_write+0x12>
  }
  return len;
 8000baa:	687b      	ldr	r3, [r7, #4]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_close>:

int _close(int file)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bdc:	605a      	str	r2, [r3, #4]
  return 0;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_isatty>:

int _isatty(int file)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f005 fe7e 	bl	800694c <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20040000 	.word	0x20040000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	20000148 	.word	0x20000148
 8000c84:	200002a0 	.word	0x200002a0

08000c88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <SystemInit+0x68>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c92:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <SystemInit+0x68>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <SystemInit+0x6c>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <SystemInit+0x6c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <SystemInit+0x6c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <SystemInit+0x6c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <SystemInit+0x6c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <SystemInit+0x6c>)
 8000cba:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000cbe:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <SystemInit+0x6c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <SystemInit+0x6c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a09      	ldr	r2, [pc, #36]	@ (8000cf4 <SystemInit+0x6c>)
 8000cd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <SystemInit+0x6c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <SystemInit+0x68>)
 8000cde:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ce2:	609a      	str	r2, [r3, #8]
  #endif
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00
 8000cf4:	46020c00 	.word	0x46020c00

08000cf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf8:	480d      	ldr	r0, [pc, #52]	@ (8000d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cfa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cfc:	f7ff ffc4 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d02:	490d      	ldr	r1, [pc, #52]	@ (8000d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <LoopForever+0xe>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d18:	4c0a      	ldr	r4, [pc, #40]	@ (8000d44 <LoopForever+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d26:	f005 fe17 	bl	8006958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fc43 	bl	80005b4 <main>

08000d2e <LoopForever>:

LoopForever:
    b LoopForever
 8000d2e:	e7fe      	b.n	8000d2e <LoopForever>
  ldr   r0, =_estack
 8000d30:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d3c:	080076b0 	.word	0x080076b0
  ldr r2, =_sbss
 8000d40:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d44:	2000029c 	.word	0x2000029c

08000d48 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_Init+0x50>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a11      	ldr	r2, [pc, #68]	@ (8000d9c <HAL_Init+0x50>)
 8000d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f96e 	bl	800103e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000d62:	f001 fdd7 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8000d66:	4602      	mov	r2, r0
 8000d68:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_Init+0x54>)
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	f003 030f 	and.w	r3, r3, #15
 8000d70:	490c      	ldr	r1, [pc, #48]	@ (8000da4 <HAL_Init+0x58>)
 8000d72:	5ccb      	ldrb	r3, [r1, r3]
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
 8000d78:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <HAL_Init+0x5c>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f000 f9a5 	bl	80010cc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d82:	200f      	movs	r0, #15
 8000d84:	f000 f812 	bl	8000dac <HAL_InitTick>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e002      	b.n	8000d98 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d92:	f7ff fdd9 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40022000 	.word	0x40022000
 8000da0:	46020c00 	.word	0x46020c00
 8000da4:	0800756c 	.word	0x0800756c
 8000da8:	20000000 	.word	0x20000000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000db8:	4b33      	ldr	r3, [pc, #204]	@ (8000e88 <HAL_InitTick+0xdc>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e05c      	b.n	8000e7e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000dc4:	4b31      	ldr	r3, [pc, #196]	@ (8000e8c <HAL_InitTick+0xe0>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d10c      	bne.n	8000dea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <HAL_InitTick+0xe4>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e88 <HAL_InitTick+0xdc>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e037      	b.n	8000e5a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000dea:	f000 f9c7 	bl	800117c <HAL_SYSTICK_GetCLKSourceConfig>
 8000dee:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d023      	beq.n	8000e3e <HAL_InitTick+0x92>
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d82d      	bhi.n	8000e58 <HAL_InitTick+0xac>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_InitTick+0x5e>
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d00d      	beq.n	8000e24 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000e08:	e026      	b.n	8000e58 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <HAL_InitTick+0xe4>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <HAL_InitTick+0xdc>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4619      	mov	r1, r3
 8000e14:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e20:	60fb      	str	r3, [r7, #12]
        break;
 8000e22:	e01a      	b.n	8000e5a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e24:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <HAL_InitTick+0xdc>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e32:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	60fb      	str	r3, [r7, #12]
        break;
 8000e3c:	e00d      	b.n	8000e5a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_InitTick+0xdc>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e54:	60fb      	str	r3, [r7, #12]
        break;
 8000e56:	e000      	b.n	8000e5a <HAL_InitTick+0xae>
        break;
 8000e58:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f000 f914 	bl	8001088 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e009      	b.n	8000e7e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e72:	f000 f8ef 	bl	8001054 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000e76:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <HAL_InitTick+0xe8>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	e000e010 	.word	0xe000e010
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	2000014c 	.word	0x2000014c

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000014c 	.word	0x2000014c

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	@ (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	@ 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	@ 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ff6a 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001062:	f7ff ff81 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 8001066:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	6978      	ldr	r0, [r7, #20]
 800106e:	f7ff ffb3 	bl	8000fd8 <NVIC_EncodePriority>
 8001072:	4602      	mov	r2, r0
 8001074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff82 	bl	8000f84 <__NVIC_SetPriority>
}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001098:	d301      	bcc.n	800109e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800109a:	2301      	movs	r3, #1
 800109c:	e00d      	b.n	80010ba <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <HAL_SYSTICK_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <HAL_SYSTICK_Config+0x40>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_SYSTICK_Config+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <HAL_SYSTICK_Config+0x40>)
 80010b2:	f043 0303 	orr.w	r3, r3, #3
 80010b6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d844      	bhi.n	8001164 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80010da:	a201      	add	r2, pc, #4	@ (adr r2, 80010e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	08001103 	.word	0x08001103
 80010e4:	08001121 	.word	0x08001121
 80010e8:	08001143 	.word	0x08001143
 80010ec:	08001165 	.word	0x08001165
 80010f0:	080010f5 	.word	0x080010f5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80010f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6013      	str	r3, [r2, #0]
      break;
 8001100:	e031      	b.n	8001166 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800110e:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	4a18      	ldr	r2, [pc, #96]	@ (8001178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001116:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800111a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800111e:	e022      	b.n	8001166 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a13      	ldr	r2, [pc, #76]	@ (8001174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001126:	f023 0304 	bic.w	r3, r3, #4
 800112a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001136:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001138:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800113c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001140:	e011      	b.n	8001166 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001154:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800115a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800115e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001162:	e000      	b.n	8001166 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001164:	bf00      	nop
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010
 8001178:	46020c00 	.word	0x46020c00

0800117c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800118e:	2304      	movs	r3, #4
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	e021      	b.n	80011d8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800119e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80011a6:	d011      	beq.n	80011cc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80011ae:	d810      	bhi.n	80011d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011bc:	d003      	beq.n	80011c6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80011be:	e008      	b.n	80011d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
        break;
 80011c4:	e008      	b.n	80011d8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80011c6:	2301      	movs	r3, #1
 80011c8:	607b      	str	r3, [r7, #4]
        break;
 80011ca:	e005      	b.n	80011d8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80011cc:	2302      	movs	r3, #2
 80011ce:	607b      	str	r3, [r7, #4]
        break;
 80011d0:	e002      	b.n	80011d8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
        break;
 80011d6:	bf00      	nop
    }
  }
  return systick_source;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010
 80011ec:	46020c00 	.word	0x46020c00

080011f0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	@ 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001202:	e1ba      	b.n	800157a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 81aa 	beq.w	8001574 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a55      	ldr	r2, [pc, #340]	@ (8001378 <HAL_GPIO_Init+0x188>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d15d      	bne.n	80012e4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800122e:	2201      	movs	r2, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	4013      	ands	r3, r2
 800123c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0201 	and.w	r2, r3, #1
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	4313      	orrs	r3, r2
 8001250:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001258:	4a48      	ldr	r2, [pc, #288]	@ (800137c <HAL_GPIO_Init+0x18c>)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001260:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001262:	4a46      	ldr	r2, [pc, #280]	@ (800137c <HAL_GPIO_Init+0x18c>)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4413      	add	r3, r2
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	3208      	adds	r2, #8
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	4013      	ands	r3, r2
 8001290:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220b      	movs	r2, #11
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	3208      	adds	r2, #8
 80012ae:	69f9      	ldr	r1, [r7, #28]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2202      	movs	r2, #2
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e067      	b.n	80013b4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x104>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d145      	bne.n	8001380 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	4013      	ands	r3, r2
 8001316:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	f003 020f 	and.w	r2, r3, #15
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	4313      	orrs	r3, r2
 8001330:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	69f9      	ldr	r1, [r7, #28]
 800133c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	4013      	ands	r3, r2
 8001356:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	4313      	orrs	r3, r2
 800136c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e01e      	b.n	80013b4 <HAL_GPIO_Init+0x1c4>
 8001376:	bf00      	nop
 8001378:	46020000 	.word	0x46020000
 800137c:	080075c4 	.word	0x080075c4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	4013      	ands	r3, r2
 8001396:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d00b      	beq.n	80013d4 <HAL_GPIO_Init+0x1e4>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d007      	beq.n	80013d4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c8:	2b11      	cmp	r3, #17
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b12      	cmp	r3, #18
 80013d2:	d130      	bne.n	8001436 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800140a:	2201      	movs	r2, #1
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	4013      	ands	r3, r2
 8001418:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	f003 0201 	and.w	r2, r3, #1
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	4313      	orrs	r3, r2
 800142e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d017      	beq.n	800146e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	4013      	ands	r3, r2
 8001454:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	4313      	orrs	r3, r2
 8001466:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d07c      	beq.n	8001574 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800147a:	4a47      	ldr	r2, [pc, #284]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3318      	adds	r3, #24
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	4013      	ands	r3, r2
 800149c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	0a9a      	lsrs	r2, r3, #10
 80014a2:	4b3e      	ldr	r3, [pc, #248]	@ (800159c <HAL_GPIO_Init+0x3ac>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	f002 0203 	and.w	r2, r2, #3
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	4093      	lsls	r3, r2
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80014b6:	4938      	ldr	r1, [pc, #224]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3318      	adds	r3, #24
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80014c4:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80014e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001512:	4a21      	ldr	r2, [pc, #132]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001518:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 800151a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800151e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	4013      	ands	r3, r2
 8001528:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800153e:	4a16      	ldr	r2, [pc, #88]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 8001548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800154c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43db      	mvns	r3, r3
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	4013      	ands	r3, r2
 8001556:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800156c:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_GPIO_Init+0x3a8>)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	f47f ae3d 	bne.w	8001204 <HAL_GPIO_Init+0x14>
  }
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	3724      	adds	r7, #36	@ 0x24
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	46022000 	.word	0x46022000
 800159c:	002f7f7f 	.word	0x002f7f7f

080015a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	46020800 	.word	0x46020800

080015c0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80015c8:	4b39      	ldr	r3, [pc, #228]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d10b      	bne.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e0:	d905      	bls.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80015e2:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	4a32      	ldr	r2, [pc, #200]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ec:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e057      	b.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f8:	d90a      	bls.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4313      	orrs	r3, r2
 8001606:	4a2a      	ldr	r2, [pc, #168]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160c:	60d3      	str	r3, [r2, #12]
 800160e:	e007      	b.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001610:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001618:	4925      	ldr	r1, [pc, #148]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4313      	orrs	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a24      	ldr	r2, [pc, #144]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	099b      	lsrs	r3, r3, #6
 800162c:	2232      	movs	r2, #50	@ 0x32
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	099b      	lsrs	r3, r3, #6
 800163a:	3301      	adds	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800163e:	e002      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3b01      	subs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001646:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f3      	bne.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01b      	beq.n	8001696 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a15      	ldr	r2, [pc, #84]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	2232      	movs	r2, #50	@ 0x32
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	3301      	adds	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800167c:	e002      	b.n	8001684 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3b01      	subs	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001684:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f3      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e000      	b.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	46020800 	.word	0x46020800
 80016b4:	20000000 	.word	0x20000000
 80016b8:	10624dd3 	.word	0x10624dd3

080016bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80016c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	46020800 	.word	0x46020800

080016d8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80016e0:	4b22      	ldr	r3, [pc, #136]	@ (800176c <HAL_PWREx_ConfigSupply+0x94>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <HAL_PWREx_ConfigSupply+0x98>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	099b      	lsrs	r3, r3, #6
 80016ec:	2232      	movs	r2, #50	@ 0x32
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001770 <HAL_PWREx_ConfigSupply+0x98>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	099b      	lsrs	r3, r3, #6
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d113      	bne.n	800172c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_PWREx_ConfigSupply+0x9c>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a1a      	ldr	r2, [pc, #104]	@ (8001774 <HAL_PWREx_ConfigSupply+0x9c>)
 800170a:	f023 0302 	bic.w	r3, r3, #2
 800170e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001710:	e002      	b.n	8001718 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3b01      	subs	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001718:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <HAL_PWREx_ConfigSupply+0x9c>)
 800171a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b02      	cmp	r3, #2
 8001722:	d116      	bne.n	8001752 <HAL_PWREx_ConfigSupply+0x7a>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f3      	bne.n	8001712 <HAL_PWREx_ConfigSupply+0x3a>
 800172a:	e012      	b.n	8001752 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_PWREx_ConfigSupply+0x9c>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a10      	ldr	r2, [pc, #64]	@ (8001774 <HAL_PWREx_ConfigSupply+0x9c>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001738:	e002      	b.n	8001740 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3b01      	subs	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <HAL_PWREx_ConfigSupply+0x9c>)
 8001742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <HAL_PWREx_ConfigSupply+0x7a>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f3      	bne.n	800173a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e000      	b.n	800175e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000
 8001770:	10624dd3 	.word	0x10624dd3
 8001774:	46020800 	.word	0x46020800

08001778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	@ 0x38
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	f000 bec8 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001792:	4b99      	ldr	r3, [pc, #612]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179c:	4b96      	ldr	r3, [pc, #600]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 816c 	beq.w	8001a8c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80017b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_RCC_OscConfig+0x52>
 80017ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	f040 80de 	bne.w	800197e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	f040 80da 	bne.w	800197e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f000 bea5 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017dc:	4b86      	ldr	r3, [pc, #536]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <HAL_RCC_OscConfig+0x7a>
 80017e8:	4b83      	ldr	r3, [pc, #524]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80017f0:	e005      	b.n	80017fe <HAL_RCC_OscConfig+0x86>
 80017f2:	4b81      	ldr	r3, [pc, #516]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80017f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80017fe:	4293      	cmp	r3, r2
 8001800:	d255      	bcs.n	80018ae <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10a      	bne.n	800181e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180c:	4618      	mov	r0, r3
 800180e:	f001 f9d9 	bl	8002bc4 <RCC_SetFlashLatencyFromMSIRange>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	f000 be82 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800181e:	4b76      	ldr	r3, [pc, #472]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	4a75      	ldr	r2, [pc, #468]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001824:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001828:	6093      	str	r3, [r2, #8]
 800182a:	4b73      	ldr	r3, [pc, #460]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	4970      	ldr	r1, [pc, #448]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001844:	d309      	bcc.n	800185a <HAL_RCC_OscConfig+0xe2>
 8001846:	4b6c      	ldr	r3, [pc, #432]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f023 021f 	bic.w	r2, r3, #31
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4969      	ldr	r1, [pc, #420]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
 8001858:	e07e      	b.n	8001958 <HAL_RCC_OscConfig+0x1e0>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	2b00      	cmp	r3, #0
 8001860:	da0a      	bge.n	8001878 <HAL_RCC_OscConfig+0x100>
 8001862:	4b65      	ldr	r3, [pc, #404]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	015b      	lsls	r3, r3, #5
 8001870:	4961      	ldr	r1, [pc, #388]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001872:	4313      	orrs	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
 8001876:	e06f      	b.n	8001958 <HAL_RCC_OscConfig+0x1e0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001880:	d30a      	bcc.n	8001898 <HAL_RCC_OscConfig+0x120>
 8001882:	4b5d      	ldr	r3, [pc, #372]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	4959      	ldr	r1, [pc, #356]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001892:	4313      	orrs	r3, r2
 8001894:	60cb      	str	r3, [r1, #12]
 8001896:	e05f      	b.n	8001958 <HAL_RCC_OscConfig+0x1e0>
 8001898:	4b57      	ldr	r3, [pc, #348]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	03db      	lsls	r3, r3, #15
 80018a6:	4954      	ldr	r1, [pc, #336]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e054      	b.n	8001958 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80018ae:	4b52      	ldr	r3, [pc, #328]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4a51      	ldr	r2, [pc, #324]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80018b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018b8:	6093      	str	r3, [r2, #8]
 80018ba:	4b4f      	ldr	r3, [pc, #316]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	494c      	ldr	r1, [pc, #304]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80018d4:	d309      	bcc.n	80018ea <HAL_RCC_OscConfig+0x172>
 80018d6:	4b48      	ldr	r3, [pc, #288]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f023 021f 	bic.w	r2, r3, #31
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4945      	ldr	r1, [pc, #276]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60cb      	str	r3, [r1, #12]
 80018e8:	e028      	b.n	800193c <HAL_RCC_OscConfig+0x1c4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da0a      	bge.n	8001908 <HAL_RCC_OscConfig+0x190>
 80018f2:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	015b      	lsls	r3, r3, #5
 8001900:	493d      	ldr	r1, [pc, #244]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001902:	4313      	orrs	r3, r2
 8001904:	60cb      	str	r3, [r1, #12]
 8001906:	e019      	b.n	800193c <HAL_RCC_OscConfig+0x1c4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001910:	d30a      	bcc.n	8001928 <HAL_RCC_OscConfig+0x1b0>
 8001912:	4b39      	ldr	r3, [pc, #228]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	029b      	lsls	r3, r3, #10
 8001920:	4935      	ldr	r1, [pc, #212]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001922:	4313      	orrs	r3, r2
 8001924:	60cb      	str	r3, [r1, #12]
 8001926:	e009      	b.n	800193c <HAL_RCC_OscConfig+0x1c4>
 8001928:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	03db      	lsls	r3, r3, #15
 8001936:	4930      	ldr	r1, [pc, #192]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001938:	4313      	orrs	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800193c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10a      	bne.n	8001958 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	4618      	mov	r0, r3
 8001948:	f001 f93c 	bl	8002bc4 <RCC_SetFlashLatencyFromMSIRange>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	f000 bde5 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001958:	f001 f8de 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_RCC_OscConfig+0x284>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa23 	bl	8000dac <HAL_InitTick>
 8001966:	4603      	mov	r3, r0
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800196c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 808a 	beq.w	8001a8a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800197a:	f000 bdd2 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d066      	beq.n	8001a54 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1b      	ldr	r2, [pc, #108]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001992:	f7ff fa95 	bl	8000ec0 <HAL_GetTick>
 8001996:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001998:	e009      	b.n	80019ae <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199a:	f7ff fa91 	bl	8000ec0 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d902      	bls.n	80019ae <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	f000 bdba 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80019ae:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0ef      	beq.n	800199a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	4a0e      	ldr	r2, [pc, #56]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80019c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019c4:	6093      	str	r3, [r2, #8]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	4909      	ldr	r1, [pc, #36]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80019e0:	d30e      	bcc.n	8001a00 <HAL_RCC_OscConfig+0x288>
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f023 021f 	bic.w	r2, r3, #31
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4902      	ldr	r1, [pc, #8]	@ (80019f8 <HAL_RCC_OscConfig+0x280>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
 80019f4:	e04a      	b.n	8001a8c <HAL_RCC_OscConfig+0x314>
 80019f6:	bf00      	nop
 80019f8:	46020c00 	.word	0x46020c00
 80019fc:	20000004 	.word	0x20000004
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da0a      	bge.n	8001a1e <HAL_RCC_OscConfig+0x2a6>
 8001a08:	4b98      	ldr	r3, [pc, #608]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	015b      	lsls	r3, r3, #5
 8001a16:	4995      	ldr	r1, [pc, #596]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
 8001a1c:	e036      	b.n	8001a8c <HAL_RCC_OscConfig+0x314>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a26:	d30a      	bcc.n	8001a3e <HAL_RCC_OscConfig+0x2c6>
 8001a28:	4b90      	ldr	r3, [pc, #576]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	029b      	lsls	r3, r3, #10
 8001a36:	498d      	ldr	r1, [pc, #564]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e026      	b.n	8001a8c <HAL_RCC_OscConfig+0x314>
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	03db      	lsls	r3, r3, #15
 8001a4c:	4987      	ldr	r1, [pc, #540]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60cb      	str	r3, [r1, #12]
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001a54:	4b85      	ldr	r3, [pc, #532]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a84      	ldr	r2, [pc, #528]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a60:	f7ff fa2e 	bl	8000ec0 <HAL_GetTick>
 8001a64:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001a66:	e009      	b.n	8001a7c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a68:	f7ff fa2a 	bl	8000ec0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d902      	bls.n	8001a7c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	f000 bd53 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ef      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2f0>
 8001a88:	e000      	b.n	8001a8c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 808b 	beq.w	8001bb0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x334>
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d17d      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f000 bd34 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x35a>
 8001ac4:	4b69      	ldr	r3, [pc, #420]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a68      	ldr	r2, [pc, #416]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e041      	b.n	8001b56 <HAL_RCC_OscConfig+0x3de>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ada:	d112      	bne.n	8001b02 <HAL_RCC_OscConfig+0x38a>
 8001adc:	4b63      	ldr	r3, [pc, #396]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a62      	ldr	r2, [pc, #392]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b60      	ldr	r3, [pc, #384]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a5f      	ldr	r2, [pc, #380]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b5d      	ldr	r3, [pc, #372]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5c      	ldr	r2, [pc, #368]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e029      	b.n	8001b56 <HAL_RCC_OscConfig+0x3de>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3ba>
 8001b0c:	4b57      	ldr	r3, [pc, #348]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a56      	ldr	r2, [pc, #344]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b54      	ldr	r3, [pc, #336]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a53      	ldr	r2, [pc, #332]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b51      	ldr	r3, [pc, #324]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a50      	ldr	r2, [pc, #320]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e011      	b.n	8001b56 <HAL_RCC_OscConfig+0x3de>
 8001b32:	4b4e      	ldr	r3, [pc, #312]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a4d      	ldr	r2, [pc, #308]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a4a      	ldr	r2, [pc, #296]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b48      	ldr	r3, [pc, #288]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a47      	ldr	r2, [pc, #284]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d014      	beq.n	8001b88 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f9af 	bl	8000ec0 <HAL_GetTick>
 8001b62:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b66:	f7ff f9ab 	bl	8000ec0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b64      	cmp	r3, #100	@ 0x64
 8001b72:	d902      	bls.n	8001b7a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	f000 bcd4 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0ef      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3ee>
 8001b86:	e013      	b.n	8001bb0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001b88:	f7ff f99a 	bl	8000ec0 <HAL_GetTick>
 8001b8c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b8e:	e009      	b.n	8001ba4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff f996 	bl	8000ec0 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	@ 0x64
 8001b9c:	d902      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f000 bcbf 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba4:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ef      	bne.n	8001b90 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d05f      	beq.n	8001c7c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x456>
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	d114      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d111      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f000 bca3 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	4920      	ldr	r1, [pc, #128]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001bf0:	e044      	b.n	8001c7c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d024      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001c06:	f7ff f95b 	bl	8000ec0 <HAL_GetTick>
 8001c0a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff f957 	bl	8000ec0 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d902      	bls.n	8001c22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	f000 bc80 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c22:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0ef      	beq.n	8001c0e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	490b      	ldr	r1, [pc, #44]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	610b      	str	r3, [r1, #16]
 8001c42:	e01b      	b.n	8001c7c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c4e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001c50:	f7ff f936 	bl	8000ec0 <HAL_GetTick>
 8001c54:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff f932 	bl	8000ec0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d904      	bls.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	f000 bc5b 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
 8001c6c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c70:	4baf      	ldr	r3, [pc, #700]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ed      	bne.n	8001c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80c8 	beq.w	8001e1a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c90:	4ba7      	ldr	r3, [pc, #668]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d111      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4ba4      	ldr	r3, [pc, #656]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ca4:	4aa2      	ldr	r2, [pc, #648]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001cae:	4ba0      	ldr	r3, [pc, #640]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001cc2:	4b9c      	ldr	r3, [pc, #624]	@ (8001f34 <HAL_RCC_OscConfig+0x7bc>)
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001cce:	4b99      	ldr	r3, [pc, #612]	@ (8001f34 <HAL_RCC_OscConfig+0x7bc>)
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	4a98      	ldr	r2, [pc, #608]	@ (8001f34 <HAL_RCC_OscConfig+0x7bc>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7ff f8f1 	bl	8000ec0 <HAL_GetTick>
 8001cde:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ce0:	e009      	b.n	8001cf6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce2:	f7ff f8ed 	bl	8000ec0 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d902      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	f000 bc16 	b.w	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001cf6:	4b8f      	ldr	r3, [pc, #572]	@ (8001f34 <HAL_RCC_OscConfig+0x7bc>)
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ef      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d05f      	beq.n	8001dca <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001d0a:	4b89      	ldr	r3, [pc, #548]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d10:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699a      	ldr	r2, [r3, #24]
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d037      	beq.n	8001d90 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e3f4      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d01b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001d42:	4b7b      	ldr	r3, [pc, #492]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d48:	4a79      	ldr	r2, [pc, #484]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001d4a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001d4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001d52:	f7ff f8b5 	bl	8000ec0 <HAL_GetTick>
 8001d56:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5a:	f7ff f8b1 	bl	8000ec0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e3da      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d6c:	4b70      	ldr	r3, [pc, #448]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ef      	bne.n	8001d5a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4969      	ldr	r1, [pc, #420]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001d90:	4b67      	ldr	r3, [pc, #412]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d96:	4a66      	ldr	r2, [pc, #408]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001d98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001da0:	f7ff f88e 	bl	8000ec0 <HAL_GetTick>
 8001da4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da8:	f7ff f88a 	bl	8000ec0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e3b3      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001dba:	4b5d      	ldr	r3, [pc, #372]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ef      	beq.n	8001da8 <HAL_RCC_OscConfig+0x630>
 8001dc8:	e01b      	b.n	8001e02 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001dca:	4b59      	ldr	r3, [pc, #356]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dd0:	4a57      	ldr	r2, [pc, #348]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001dd2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001dda:	f7ff f871 	bl	8000ec0 <HAL_GetTick>
 8001dde:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de2:	f7ff f86d 	bl	8000ec0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e396      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001df4:	4b4e      	ldr	r3, [pc, #312]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ef      	bne.n	8001de2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e02:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4b49      	ldr	r3, [pc, #292]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e10:	4a47      	ldr	r2, [pc, #284]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001e12:	f023 0304 	bic.w	r3, r3, #4
 8001e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8111 	beq.w	800204a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b40      	ldr	r3, [pc, #256]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d111      	bne.n	8001e60 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e42:	4a3b      	ldr	r2, [pc, #236]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e4c:	4b38      	ldr	r3, [pc, #224]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e60:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <HAL_RCC_OscConfig+0x7bc>)
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d118      	bne.n	8001e9e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001e6c:	4b31      	ldr	r3, [pc, #196]	@ (8001f34 <HAL_RCC_OscConfig+0x7bc>)
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	4a30      	ldr	r2, [pc, #192]	@ (8001f34 <HAL_RCC_OscConfig+0x7bc>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e78:	f7ff f822 	bl	8000ec0 <HAL_GetTick>
 8001e7c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e80:	f7ff f81e 	bl	8000ec0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e347      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e92:	4b28      	ldr	r3, [pc, #160]	@ (8001f34 <HAL_RCC_OscConfig+0x7bc>)
 8001e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01f      	beq.n	8001eea <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ecc:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ed6:	e018      	b.n	8001f0a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ede:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ee8:	e00f      	b.n	8001f0a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001efa:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f00:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <HAL_RCC_OscConfig+0x7b8>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d057      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001f12:	f7fe ffd5 	bl	8000ec0 <HAL_GetTick>
 8001f16:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f18:	e00e      	b.n	8001f38 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe ffd1 	bl	8000ec0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d905      	bls.n	8001f38 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e2f8      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
 8001f30:	46020c00 	.word	0x46020c00
 8001f34:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f38:	4b9c      	ldr	r3, [pc, #624]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0e9      	beq.n	8001f1a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f52:	4b96      	ldr	r3, [pc, #600]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f58:	4a94      	ldr	r2, [pc, #592]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7fe ffac 	bl	8000ec0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e2d3      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f7a:	4b8c      	ldr	r3, [pc, #560]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ed      	beq.n	8001f64 <HAL_RCC_OscConfig+0x7ec>
 8001f88:	e053      	b.n	8002032 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f8a:	4b88      	ldr	r3, [pc, #544]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f90:	4a86      	ldr	r2, [pc, #536]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7fe ff90 	bl	8000ec0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e2b7      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fb2:	4b7e      	ldr	r3, [pc, #504]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ed      	bne.n	8001f9c <HAL_RCC_OscConfig+0x824>
 8001fc0:	e037      	b.n	8002032 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001fc2:	f7fe ff7d 	bl	8000ec0 <HAL_GetTick>
 8001fc6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7fe ff79 	bl	8000ec0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e2a0      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe0:	4b72      	ldr	r3, [pc, #456]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ed      	bne.n	8001fca <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001fee:	4b6f      	ldr	r3, [pc, #444]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01a      	beq.n	8002032 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8001ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002002:	4a6a      	ldr	r2, [pc, #424]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002008:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe ff57 	bl	8000ec0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e27e      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002024:	4b61      	ldr	r3, [pc, #388]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800202a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ed      	bne.n	800200e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002032:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b5c      	ldr	r3, [pc, #368]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 800203c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002040:	4a5a      	ldr	r2, [pc, #360]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d036      	beq.n	80020c4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	2b00      	cmp	r3, #0
 800205c:	d019      	beq.n	8002092 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800205e:	4b53      	ldr	r3, [pc, #332]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a52      	ldr	r2, [pc, #328]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002064:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002068:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800206a:	f7fe ff29 	bl	8000ec0 <HAL_GetTick>
 800206e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002072:	f7fe ff25 	bl	8000ec0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e24e      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002084:	4b49      	ldr	r3, [pc, #292]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x8fa>
 8002090:	e018      	b.n	80020c4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002092:	4b46      	ldr	r3, [pc, #280]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a45      	ldr	r2, [pc, #276]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002098:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800209c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800209e:	f7fe ff0f 	bl	8000ec0 <HAL_GetTick>
 80020a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a6:	f7fe ff0b 	bl	8000ec0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e234      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80020b8:	4b3c      	ldr	r3, [pc, #240]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d036      	beq.n	800213e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d019      	beq.n	800210c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80020d8:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a33      	ldr	r2, [pc, #204]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 80020de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020e4:	f7fe feec 	bl	8000ec0 <HAL_GetTick>
 80020e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80020ec:	f7fe fee8 	bl	8000ec0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e211      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80020fe:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x974>
 800210a:	e018      	b.n	800213e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800210c:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a26      	ldr	r2, [pc, #152]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002116:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002118:	f7fe fed2 	bl	8000ec0 <HAL_GetTick>
 800211c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002120:	f7fe fece 	bl	8000ec0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1f7      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002132:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d07f      	beq.n	800224a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	2b00      	cmp	r3, #0
 8002150:	d062      	beq.n	8002218 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4a15      	ldr	r2, [pc, #84]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002158:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800215c:	6093      	str	r3, [r2, #8]
 800215e:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	4910      	ldr	r1, [pc, #64]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002178:	d309      	bcc.n	800218e <HAL_RCC_OscConfig+0xa16>
 800217a:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f023 021f 	bic.w	r2, r3, #31
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4909      	ldr	r1, [pc, #36]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002188:	4313      	orrs	r3, r2
 800218a:	60cb      	str	r3, [r1, #12]
 800218c:	e02a      	b.n	80021e4 <HAL_RCC_OscConfig+0xa6c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	2b00      	cmp	r3, #0
 8002194:	da0c      	bge.n	80021b0 <HAL_RCC_OscConfig+0xa38>
 8002196:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	015b      	lsls	r3, r3, #5
 80021a4:	4901      	ldr	r1, [pc, #4]	@ (80021ac <HAL_RCC_OscConfig+0xa34>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60cb      	str	r3, [r1, #12]
 80021aa:	e01b      	b.n	80021e4 <HAL_RCC_OscConfig+0xa6c>
 80021ac:	46020c00 	.word	0x46020c00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b8:	d30a      	bcc.n	80021d0 <HAL_RCC_OscConfig+0xa58>
 80021ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	029b      	lsls	r3, r3, #10
 80021c8:	499d      	ldr	r1, [pc, #628]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60cb      	str	r3, [r1, #12]
 80021ce:	e009      	b.n	80021e4 <HAL_RCC_OscConfig+0xa6c>
 80021d0:	4b9b      	ldr	r3, [pc, #620]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	03db      	lsls	r3, r3, #15
 80021de:	4998      	ldr	r1, [pc, #608]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80021e4:	4b96      	ldr	r3, [pc, #600]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a95      	ldr	r2, [pc, #596]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80021ea:	f043 0310 	orr.w	r3, r3, #16
 80021ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021f0:	f7fe fe66 	bl	8000ec0 <HAL_GetTick>
 80021f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80021f8:	f7fe fe62 	bl	8000ec0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e18b      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800220a:	4b8d      	ldr	r3, [pc, #564]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xa80>
 8002216:	e018      	b.n	800224a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002218:	4b89      	ldr	r3, [pc, #548]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a88      	ldr	r2, [pc, #544]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 800221e:	f023 0310 	bic.w	r3, r3, #16
 8002222:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002224:	f7fe fe4c 	bl	8000ec0 <HAL_GetTick>
 8002228:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800222c:	f7fe fe48 	bl	8000ec0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e171      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800223e:	4b80      	ldr	r3, [pc, #512]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8166 	beq.w	8002520 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225a:	4b79      	ldr	r3, [pc, #484]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b0c      	cmp	r3, #12
 8002264:	f000 80f2 	beq.w	800244c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226c:	2b02      	cmp	r3, #2
 800226e:	f040 80c5 	bne.w	80023fc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b73      	ldr	r3, [pc, #460]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a72      	ldr	r2, [pc, #456]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002278:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800227c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800227e:	f7fe fe1f 	bl	8000ec0 <HAL_GetTick>
 8002282:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe fe1b 	bl	8000ec0 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e144      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002298:	4b69      	ldr	r3, [pc, #420]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f0      	bne.n	8002286 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a4:	4b66      	ldr	r3, [pc, #408]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d111      	bne.n	80022d6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b63      	ldr	r3, [pc, #396]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80022b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b8:	4a61      	ldr	r2, [pc, #388]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80022c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80022d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002444 <HAL_RCC_OscConfig+0xccc>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80022ea:	4b56      	ldr	r3, [pc, #344]	@ (8002444 <HAL_RCC_OscConfig+0xccc>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4a55      	ldr	r2, [pc, #340]	@ (8002444 <HAL_RCC_OscConfig+0xccc>)
 80022f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80022f6:	4b52      	ldr	r3, [pc, #328]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80022f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800230a:	3a01      	subs	r2, #1
 800230c:	0212      	lsls	r2, r2, #8
 800230e:	4311      	orrs	r1, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002314:	430a      	orrs	r2, r1
 8002316:	494a      	ldr	r1, [pc, #296]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002318:	4313      	orrs	r3, r2
 800231a:	628b      	str	r3, [r1, #40]	@ 0x28
 800231c:	4b48      	ldr	r3, [pc, #288]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 800231e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002320:	4b49      	ldr	r3, [pc, #292]	@ (8002448 <HAL_RCC_OscConfig+0xcd0>)
 8002322:	4013      	ands	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002328:	3a01      	subs	r2, #1
 800232a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002332:	3a01      	subs	r2, #1
 8002334:	0252      	lsls	r2, r2, #9
 8002336:	b292      	uxth	r2, r2
 8002338:	4311      	orrs	r1, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800233e:	3a01      	subs	r2, #1
 8002340:	0412      	lsls	r2, r2, #16
 8002342:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002346:	4311      	orrs	r1, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800234c:	3a01      	subs	r2, #1
 800234e:	0612      	lsls	r2, r2, #24
 8002350:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002354:	430a      	orrs	r2, r1
 8002356:	493a      	ldr	r1, [pc, #232]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002358:	4313      	orrs	r3, r2
 800235a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800235c:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 800235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002360:	4a37      	ldr	r2, [pc, #220]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002362:	f023 0310 	bic.w	r3, r3, #16
 8002366:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	4a34      	ldr	r2, [pc, #208]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002372:	4b33      	ldr	r3, [pc, #204]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	4a32      	ldr	r2, [pc, #200]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800237e:	4b30      	ldr	r3, [pc, #192]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002382:	f023 020c 	bic.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	492d      	ldr	r1, [pc, #180]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 800238c:	4313      	orrs	r3, r2
 800238e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002390:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <HAL_RCC_OscConfig+0xccc>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a29      	ldr	r2, [pc, #164]	@ (8002444 <HAL_RCC_OscConfig+0xccc>)
 800239e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80023a4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80023ac:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b2:	4a23      	ldr	r2, [pc, #140]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80023bc:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023c8:	f7fe fd7a 	bl	8000ec0 <HAL_GetTick>
 80023cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe fd76 	bl	8000ec0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e09f      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80023e2:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80023f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f2:	4a13      	ldr	r2, [pc, #76]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f8:	6293      	str	r3, [r2, #40]	@ 0x28
 80023fa:	e091      	b.n	8002520 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80023fc:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0f      	ldr	r2, [pc, #60]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002406:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002408:	f7fe fd5a 	bl	8000ec0 <HAL_GetTick>
 800240c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe fd56 	bl	8000ec0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e07f      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800242e:	4b04      	ldr	r3, [pc, #16]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	4a03      	ldr	r2, [pc, #12]	@ (8002440 <HAL_RCC_OscConfig+0xcc8>)
 8002434:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002438:	f023 0303 	bic.w	r3, r3, #3
 800243c:	6293      	str	r3, [r2, #40]	@ 0x28
 800243e:	e06f      	b.n	8002520 <HAL_RCC_OscConfig+0xda8>
 8002440:	46020c00 	.word	0x46020c00
 8002444:	46020800 	.word	0x46020800
 8002448:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800244c:	4b37      	ldr	r3, [pc, #220]	@ (800252c <HAL_RCC_OscConfig+0xdb4>)
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002452:	4b36      	ldr	r3, [pc, #216]	@ (800252c <HAL_RCC_OscConfig+0xdb4>)
 8002454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002456:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245c:	2b01      	cmp	r3, #1
 800245e:	d039      	beq.n	80024d4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0203 	and.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d132      	bne.n	80024d4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d129      	bne.n	80024d4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d122      	bne.n	80024d4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002498:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d11a      	bne.n	80024d4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	0a5b      	lsrs	r3, r3, #9
 80024a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d111      	bne.n	80024d4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	0c1b      	lsrs	r3, r3, #16
 80024b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024bc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	0e1b      	lsrs	r3, r3, #24
 80024c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e024      	b.n	8002522 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80024d8:	4b14      	ldr	r3, [pc, #80]	@ (800252c <HAL_RCC_OscConfig+0xdb4>)
 80024da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d01a      	beq.n	8002520 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	@ (800252c <HAL_RCC_OscConfig+0xdb4>)
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	4a0f      	ldr	r2, [pc, #60]	@ (800252c <HAL_RCC_OscConfig+0xdb4>)
 80024f0:	f023 0310 	bic.w	r3, r3, #16
 80024f4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fce3 	bl	8000ec0 <HAL_GetTick>
 80024fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80024fc:	bf00      	nop
 80024fe:	f7fe fcdf 	bl	8000ec0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002506:	4293      	cmp	r3, r2
 8002508:	d0f9      	beq.n	80024fe <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250e:	4a07      	ldr	r2, [pc, #28]	@ (800252c <HAL_RCC_OscConfig+0xdb4>)
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_RCC_OscConfig+0xdb4>)
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <HAL_RCC_OscConfig+0xdb4>)
 800251a:	f043 0310 	orr.w	r3, r3, #16
 800251e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3738      	adds	r7, #56	@ 0x38
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	46020c00 	.word	0x46020c00

08002530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e1d9      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b9b      	ldr	r3, [pc, #620]	@ (80027b4 <HAL_RCC_ClockConfig+0x284>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b98      	ldr	r3, [pc, #608]	@ (80027b4 <HAL_RCC_ClockConfig+0x284>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 020f 	bic.w	r2, r3, #15
 800255a:	4996      	ldr	r1, [pc, #600]	@ (80027b4 <HAL_RCC_ClockConfig+0x284>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b94      	ldr	r3, [pc, #592]	@ (80027b4 <HAL_RCC_ClockConfig+0x284>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e1c1      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	4b8c      	ldr	r3, [pc, #560]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800258c:	429a      	cmp	r2, r3
 800258e:	d908      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002590:	4b89      	ldr	r3, [pc, #548]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	4986      	ldr	r1, [pc, #536]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d012      	beq.n	80025d4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	4b81      	ldr	r3, [pc, #516]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025bc:	429a      	cmp	r2, r3
 80025be:	d909      	bls.n	80025d4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80025c0:	4b7d      	ldr	r3, [pc, #500]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	497a      	ldr	r1, [pc, #488]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d010      	beq.n	8002602 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4b74      	ldr	r3, [pc, #464]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d908      	bls.n	8002602 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b71      	ldr	r3, [pc, #452]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	496e      	ldr	r1, [pc, #440]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4b69      	ldr	r3, [pc, #420]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	429a      	cmp	r2, r3
 800261c:	d908      	bls.n	8002630 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800261e:	4b66      	ldr	r3, [pc, #408]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f023 020f 	bic.w	r2, r3, #15
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4963      	ldr	r1, [pc, #396]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 800262c:	4313      	orrs	r3, r2
 800262e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80d2 	beq.w	80027e2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d143      	bne.n	80026d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b5b      	ldr	r3, [pc, #364]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d110      	bne.n	800267a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	4b57      	ldr	r3, [pc, #348]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 800265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800265e:	4a56      	ldr	r2, [pc, #344]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002668:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800267a:	f7fe fc21 	bl	8000ec0 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002680:	4b4e      	ldr	r3, [pc, #312]	@ (80027bc <HAL_RCC_ClockConfig+0x28c>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00f      	beq.n	80026ac <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800268e:	f7fe fc17 	bl	8000ec0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e12b      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80026a0:	4b46      	ldr	r3, [pc, #280]	@ (80027bc <HAL_RCC_ClockConfig+0x28c>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4b41      	ldr	r3, [pc, #260]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80026b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b8:	4a3f      	ldr	r2, [pc, #252]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026c2:	4b3d      	ldr	r3, [pc, #244]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d121      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e112      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026da:	4b37      	ldr	r3, [pc, #220]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e106      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80026f2:	4b31      	ldr	r3, [pc, #196]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0fa      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002702:	4b2d      	ldr	r3, [pc, #180]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0f2      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b29      	ldr	r3, [pc, #164]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4926      	ldr	r1, [pc, #152]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 8002720:	4313      	orrs	r3, r2
 8002722:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002724:	f7fe fbcc 	bl	8000ec0 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d112      	bne.n	8002758 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002732:	e00a      	b.n	800274a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002734:	f7fe fbc4 	bl	8000ec0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0d6      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274a:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d1ee      	bne.n	8002734 <HAL_RCC_ClockConfig+0x204>
 8002756:	e044      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d112      	bne.n	8002786 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002762:	f7fe fbad 	bl	8000ec0 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0bf      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002778:	4b0f      	ldr	r3, [pc, #60]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d1ee      	bne.n	8002762 <HAL_RCC_ClockConfig+0x232>
 8002784:	e02d      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d123      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7fe fb96 	bl	8000ec0 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0a8      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027a6:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <HAL_RCC_ClockConfig+0x288>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ee      	bne.n	8002790 <HAL_RCC_ClockConfig+0x260>
 80027b2:	e016      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2b2>
 80027b4:	40022000 	.word	0x40022000
 80027b8:	46020c00 	.word	0x46020c00
 80027bc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fe fb7e 	bl	8000ec0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e090      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d1ee      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	4b43      	ldr	r3, [pc, #268]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d208      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80027fe:	4b40      	ldr	r3, [pc, #256]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f023 020f 	bic.w	r2, r3, #15
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	493d      	ldr	r1, [pc, #244]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b3c      	ldr	r3, [pc, #240]	@ (8002904 <HAL_RCC_ClockConfig+0x3d4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d210      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_RCC_ClockConfig+0x3d4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 020f 	bic.w	r2, r3, #15
 8002826:	4937      	ldr	r1, [pc, #220]	@ (8002904 <HAL_RCC_ClockConfig+0x3d4>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b35      	ldr	r3, [pc, #212]	@ (8002904 <HAL_RCC_ClockConfig+0x3d4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e05b      	b.n	80028f8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d010      	beq.n	800286e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002858:	429a      	cmp	r2, r3
 800285a:	d208      	bcs.n	800286e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800285c:	4b28      	ldr	r3, [pc, #160]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4925      	ldr	r1, [pc, #148]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d012      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002888:	429a      	cmp	r2, r3
 800288a:	d209      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800288c:	4b1c      	ldr	r3, [pc, #112]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	4919      	ldr	r1, [pc, #100]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d010      	beq.n	80028ce <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d208      	bcs.n	80028ce <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80028bc:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	490d      	ldr	r1, [pc, #52]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <HAL_RCC_ClockConfig+0x3d0>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	490a      	ldr	r1, [pc, #40]	@ (8002908 <HAL_RCC_ClockConfig+0x3d8>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
 80028e4:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_RCC_ClockConfig+0x3dc>)
 80028e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCC_ClockConfig+0x3e0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fa5d 	bl	8000dac <HAL_InitTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	46020c00 	.word	0x46020c00
 8002904:	40022000 	.word	0x40022000
 8002908:	0800756c 	.word	0x0800756c
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b08b      	sub	sp, #44	@ 0x2c
 8002918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002922:	4b78      	ldr	r3, [pc, #480]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292c:	4b75      	ldr	r3, [pc, #468]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x34>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d121      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d11e      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002948:	4b6e      	ldr	r3, [pc, #440]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002954:	4b6b      	ldr	r3, [pc, #428]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800295a:	0b1b      	lsrs	r3, r3, #12
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
 8002962:	e005      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002964:	4b67      	ldr	r3, [pc, #412]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	0f1b      	lsrs	r3, r3, #28
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002970:	4a65      	ldr	r2, [pc, #404]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d110      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002984:	e00d      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002986:	4b5f      	ldr	r3, [pc, #380]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d102      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002992:	4b5e      	ldr	r3, [pc, #376]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	e004      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b08      	cmp	r3, #8
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800299e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80029a0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	f040 80a5 	bne.w	8002af4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80029aa:	4b56      	ldr	r3, [pc, #344]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80029ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80029b4:	4b53      	ldr	r3, [pc, #332]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3301      	adds	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80029c2:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80029ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	08db      	lsrs	r3, r3, #3
 80029d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d003      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0xe4>
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d022      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x128>
 80029f6:	e043      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a02:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002b10 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a1a:	ed97 6a01 	vldr	s12, [r7, #4]
 8002a1e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8002b14 <HAL_RCC_GetSysClockFreq+0x200>
 8002a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a3a:	e046      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a46:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002b10 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a5e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002a62:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8002b14 <HAL_RCC_GetSysClockFreq+0x200>
 8002a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a7e:	e024      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a98:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002aa8:	ed97 6a01 	vldr	s12, [r7, #4]
 8002aac:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8002b14 <HAL_RCC_GetSysClockFreq+0x200>
 8002ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ab8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ac8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ace:	0e1b      	lsrs	r3, r3, #24
 8002ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aee:	ee17 3a90 	vmov	r3, s15
 8002af2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	372c      	adds	r7, #44	@ 0x2c
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	46020c00 	.word	0x46020c00
 8002b08:	08007584 	.word	0x08007584
 8002b0c:	00f42400 	.word	0x00f42400
 8002b10:	4b742400 	.word	0x4b742400
 8002b14:	46000000 	.word	0x46000000

08002b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b1c:	f7ff fefa 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <HAL_RCC_GetHCLKFreq+0x28>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	4906      	ldr	r1, [pc, #24]	@ (8002b44 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x30>)
 8002b34:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002b36:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x30>)
 8002b38:	681b      	ldr	r3, [r3, #0]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	46020c00 	.word	0x46020c00
 8002b44:	0800756c 	.word	0x0800756c
 8002b48:	20000000 	.word	0x20000000

08002b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002b50:	f7ff ffe2 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	46020c00 	.word	0x46020c00
 8002b70:	0800757c 	.word	0x0800757c

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002b78:	f7ff ffce 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4903      	ldr	r1, [pc, #12]	@ (8002b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	46020c00 	.word	0x46020c00
 8002b98:	0800757c 	.word	0x0800757c

08002b9c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002ba0:	f7ff ffba 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_RCC_GetPCLK3Freq+0x20>)
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4903      	ldr	r1, [pc, #12]	@ (8002bc0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	46020c00 	.word	0x46020c00
 8002bc0:	0800757c 	.word	0x0800757c

08002bc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bda:	f7fe fd6f 	bl	80016bc <HAL_PWREx_GetVoltageRange>
 8002bde:	6178      	str	r0, [r7, #20]
 8002be0:	e019      	b.n	8002c16 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be8:	4a37      	ldr	r2, [pc, #220]	@ (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002bf2:	4b35      	ldr	r3, [pc, #212]	@ (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c00:	f7fe fd5c 	bl	80016bc <HAL_PWREx_GetVoltageRange>
 8002c04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c06:	4b30      	ldr	r3, [pc, #192]	@ (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c0e:	f023 0304 	bic.w	r3, r3, #4
 8002c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c1c:	d003      	beq.n	8002c26 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c24:	d109      	bne.n	8002c3a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c2c:	d202      	bcs.n	8002c34 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002c32:	e033      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002c38:	e030      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c40:	d208      	bcs.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c48:	d102      	bne.n	8002c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	e025      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e035      	b.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c5a:	d90f      	bls.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c68:	d902      	bls.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e015      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002c70:	2301      	movs	r3, #1
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e012      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e00f      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c82:	d109      	bne.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c8a:	d102      	bne.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e004      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002c92:	2302      	movs	r3, #2
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	e001      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 020f 	bic.w	r2, r3, #15
 8002ca4:	4909      	ldr	r1, [pc, #36]	@ (8002ccc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002cac:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	46020c00 	.word	0x46020c00
 8002ccc:	40022000 	.word	0x40022000

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd4:	b0b6      	sub	sp, #216	@ 0xd8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	f002 0401 	and.w	r4, r2, #1
 8002cf4:	2500      	movs	r5, #0
 8002cf6:	ea54 0305 	orrs.w	r3, r4, r5
 8002cfa:	d00b      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002cfc:	4bc5      	ldr	r3, [pc, #788]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d02:	f023 0103 	bic.w	r1, r3, #3
 8002d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0c:	4ac1      	ldr	r2, [pc, #772]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f002 0804 	and.w	r8, r2, #4
 8002d20:	f04f 0900 	mov.w	r9, #0
 8002d24:	ea58 0309 	orrs.w	r3, r8, r9
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002d2a:	4bba      	ldr	r3, [pc, #744]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	4ab6      	ldr	r2, [pc, #728]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f002 0a08 	and.w	sl, r2, #8
 8002d4e:	f04f 0b00 	mov.w	fp, #0
 8002d52:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002d58:	4bae      	ldr	r3, [pc, #696]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	4aaa      	ldr	r2, [pc, #680]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f002 0310 	and.w	r3, r2, #16
 8002d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002d86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002d90:	4ba0      	ldr	r3, [pc, #640]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	4a9c      	ldr	r2, [pc, #624]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002da2:	430b      	orrs	r3, r1
 8002da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f002 0320 	and.w	r3, r2, #32
 8002db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002dc8:	4b92      	ldr	r3, [pc, #584]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dce:	f023 0107 	bic.w	r1, r3, #7
 8002dd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd8:	4a8e      	ldr	r2, [pc, #568]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002df6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002e00:	4b84      	ldr	r3, [pc, #528]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e06:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e10:	4a80      	ldr	r2, [pc, #512]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e12:	430b      	orrs	r3, r1
 8002e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002e24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002e2e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4313      	orrs	r3, r2
 8002e36:	d00b      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002e38:	4b76      	ldr	r3, [pc, #472]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e48:	4a72      	ldr	r2, [pc, #456]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8002e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	d00b      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002e70:	4b68      	ldr	r3, [pc, #416]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e80:	4a64      	ldr	r2, [pc, #400]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e82:	430b      	orrs	r3, r1
 8002e84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002e94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	d00b      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eae:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8002eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb8:	4a56      	ldr	r2, [pc, #344]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8002ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ed6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002eda:	460b      	mov	r3, r1
 8002edc:	4313      	orrs	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ee6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef0:	4a48      	ldr	r2, [pc, #288]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002f04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002f12:	460b      	mov	r3, r1
 8002f14:	4313      	orrs	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002f18:	4b3e      	ldr	r3, [pc, #248]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f1e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002f22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f28:	4a3a      	ldr	r2, [pc, #232]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002f3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f3e:	2300      	movs	r3, #0
 8002f40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f42:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002f46:	460b      	mov	r3, r1
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002f4c:	4b31      	ldr	r3, [pc, #196]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002f70:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f72:	2300      	movs	r3, #0
 8002f74:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f76:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	d04f      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f88:	2b80      	cmp	r3, #128	@ 0x80
 8002f8a:	d02d      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002f8c:	2b80      	cmp	r3, #128	@ 0x80
 8002f8e:	d827      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f90:	2b60      	cmp	r3, #96	@ 0x60
 8002f92:	d02b      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002f94:	2b60      	cmp	r3, #96	@ 0x60
 8002f96:	d823      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f98:	2b40      	cmp	r3, #64	@ 0x40
 8002f9a:	d006      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002f9c:	2b40      	cmp	r3, #64	@ 0x40
 8002f9e:	d81f      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d011      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002fa8:	e01a      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002faa:	4b1a      	ldr	r3, [pc, #104]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fae:	4a19      	ldr	r2, [pc, #100]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fb6:	e01a      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f002 f914 	bl	80051ec <RCCEx_PLL2_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fca:	e010      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fd0:	332c      	adds	r3, #44	@ 0x2c
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 f9a2 	bl	800531c <RCCEx_PLL3_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fde:	e006      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8002fe6:	e002      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8002fe8:	bf00      	nop
 8002fea:	e000      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8002fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fee:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d110      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002ff6:	4b07      	ldr	r3, [pc, #28]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ffc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003008:	4a02      	ldr	r2, [pc, #8]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800300a:	430b      	orrs	r3, r1
 800300c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003010:	e006      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003012:	bf00      	nop
 8003014:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800301c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800302c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800302e:	2300      	movs	r3, #0
 8003030:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003032:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003036:	460b      	mov	r3, r1
 8003038:	4313      	orrs	r3, r2
 800303a:	d046      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800303c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003044:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003048:	d028      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800304a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800304e:	d821      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003054:	d022      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800305a:	d81b      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800305c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003060:	d01c      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003062:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003066:	d815      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800306c:	d008      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800306e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003072:	d80f      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d011      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800307c:	d00e      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800307e:	e009      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003084:	3308      	adds	r3, #8
 8003086:	4618      	mov	r0, r3
 8003088:	f002 f8b0 	bl	80051ec <RCCEx_PLL2_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003092:	e004      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800309a:	e000      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 800309c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10d      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80030a6:	4bb6      	ldr	r3, [pc, #728]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80030a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80030b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80030b8:	4ab1      	ldr	r2, [pc, #708]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80030ba:	430b      	orrs	r3, r1
 80030bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030c0:	e003      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80030c6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80030ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80030d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80030d8:	2300      	movs	r3, #0
 80030da:	667b      	str	r3, [r7, #100]	@ 0x64
 80030dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80030e0:	460b      	mov	r3, r1
 80030e2:	4313      	orrs	r3, r2
 80030e4:	d03e      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80030e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d81d      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80030f2:	a201      	add	r2, pc, #4	@ (adr r2, 80030f8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	08003137 	.word	0x08003137
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	0800311b 	.word	0x0800311b
 8003104:	08003137 	.word	0x08003137
 8003108:	08003137 	.word	0x08003137
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800310c:	4b9c      	ldr	r3, [pc, #624]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	4a9b      	ldr	r2, [pc, #620]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003116:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003118:	e00e      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800311a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800311e:	332c      	adds	r3, #44	@ 0x2c
 8003120:	4618      	mov	r0, r3
 8003122:	f002 f8fb 	bl	800531c <RCCEx_PLL3_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800312c:	e004      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003134:	e000      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003136:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003138:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10d      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003140:	4b8f      	ldr	r3, [pc, #572]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003142:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003146:	f023 0107 	bic.w	r1, r3, #7
 800314a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003152:	4a8b      	ldr	r2, [pc, #556]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003154:	430b      	orrs	r3, r1
 8003156:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800315a:	e003      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003160:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003170:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003172:	2300      	movs	r3, #0
 8003174:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003176:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800317a:	460b      	mov	r3, r1
 800317c:	4313      	orrs	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003188:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800318c:	d028      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800318e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003192:	d821      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003194:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003198:	d024      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800319a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800319e:	d81b      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80031a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031a4:	d00e      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80031a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031aa:	d815      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b4:	d110      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031b6:	4b72      	ldr	r3, [pc, #456]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	4a71      	ldr	r2, [pc, #452]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80031c2:	e012      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031c8:	332c      	adds	r3, #44	@ 0x2c
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 f8a6 	bl	800531c <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80031d6:	e008      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80031de:	e004      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80031e8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80031ea:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80031f2:	4b63      	ldr	r3, [pc, #396]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80031f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80031fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	4a5e      	ldr	r2, [pc, #376]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003206:	430b      	orrs	r3, r1
 8003208:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800320c:	e003      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003212:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003222:	653b      	str	r3, [r7, #80]	@ 0x50
 8003224:	2300      	movs	r3, #0
 8003226:	657b      	str	r3, [r7, #84]	@ 0x54
 8003228:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800322c:	460b      	mov	r3, r1
 800322e:	4313      	orrs	r3, r2
 8003230:	f000 80ba 	beq.w	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003234:	2300      	movs	r3, #0
 8003236:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323a:	4b51      	ldr	r3, [pc, #324]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d113      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003248:	4b4d      	ldr	r3, [pc, #308]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800324e:	4a4c      	ldr	r2, [pc, #304]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003258:	4b49      	ldr	r3, [pc, #292]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003266:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003270:	4b44      	ldr	r3, [pc, #272]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	4a43      	ldr	r2, [pc, #268]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800327c:	f7fd fe20 	bl	8000ec0 <HAL_GetTick>
 8003280:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003284:	e00b      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7fd fe1b 	bl	8000ec0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d903      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800329c:	e005      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800329e:	4b39      	ldr	r3, [pc, #228]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0ed      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 80032aa:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d16a      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b2:	4b33      	ldr	r3, [pc, #204]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80032c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d023      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80032c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032cc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80032d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d01b      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d8:	4b29      	ldr	r3, [pc, #164]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e6:	4b26      	ldr	r3, [pc, #152]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032ec:	4a24      	ldr	r2, [pc, #144]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f6:	4b22      	ldr	r3, [pc, #136]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032fc:	4a20      	ldr	r2, [pc, #128]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003302:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003306:	4a1e      	ldr	r2, [pc, #120]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800330c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d019      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd fdd0 	bl	8000ec0 <HAL_GetTick>
 8003320:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003324:	e00d      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7fd fdcb 	bl	8000ec0 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003330:	1ad2      	subs	r2, r2, r3
 8003332:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003336:	429a      	cmp	r2, r3
 8003338:	d903      	bls.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8003340:	e006      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003342:	4b0f      	ldr	r3, [pc, #60]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ea      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8003350:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800335a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800335e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003366:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800336a:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800336c:	430b      	orrs	r3, r1
 800336e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003372:	e00d      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003374:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003378:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 800337c:	e008      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800337e:	bf00      	nop
 8003380:	46020c00 	.word	0x46020c00
 8003384:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800338c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003390:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4bb2      	ldr	r3, [pc, #712]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800339e:	4ab1      	ldr	r2, [pc, #708]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80033a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80033b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033b6:	2300      	movs	r3, #0
 80033b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80033be:	460b      	mov	r3, r1
 80033c0:	4313      	orrs	r3, r2
 80033c2:	d042      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80033c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80033d0:	d022      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80033d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80033d6:	d81b      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80033d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033dc:	d011      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x732>
 80033de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033e2:	d815      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d019      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80033e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033ec:	d110      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033f2:	3308      	adds	r3, #8
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 fef9 	bl	80051ec <RCCEx_PLL2_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003400:	e00d      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003402:	4b98      	ldr	r3, [pc, #608]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003406:	4a97      	ldr	r2, [pc, #604]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800340c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800340e:	e006      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003416:	e002      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003418:	bf00      	nop
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 800341c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800341e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10d      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003426:	4b8f      	ldr	r3, [pc, #572]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800342c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003434:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003438:	4a8a      	ldr	r2, [pc, #552]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800343a:	430b      	orrs	r3, r1
 800343c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003442:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003446:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800344a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003456:	643b      	str	r3, [r7, #64]	@ 0x40
 8003458:	2300      	movs	r3, #0
 800345a:	647b      	str	r3, [r7, #68]	@ 0x44
 800345c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003460:	460b      	mov	r3, r1
 8003462:	4313      	orrs	r3, r2
 8003464:	d02d      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003472:	d00b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003478:	d804      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003482:	d007      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800348a:	e004      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 800348c:	bf00      	nop
 800348e:	e002      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003494:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003496:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10d      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800349e:	4b71      	ldr	r3, [pc, #452]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80034a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b0:	4a6c      	ldr	r2, [pc, #432]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80034b2:	430b      	orrs	r3, r1
 80034b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80034b8:	e003      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ba:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80034be:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80034c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80034ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034d0:	2300      	movs	r3, #0
 80034d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80034d8:	460b      	mov	r3, r1
 80034da:	4313      	orrs	r3, r2
 80034dc:	d00c      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80034de:	4b61      	ldr	r3, [pc, #388]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80034e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034e4:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80034e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80034f2:	430b      	orrs	r3, r1
 80034f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80034f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003504:	633b      	str	r3, [r7, #48]	@ 0x30
 8003506:	2300      	movs	r3, #0
 8003508:	637b      	str	r3, [r7, #52]	@ 0x34
 800350a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800350e:	460b      	mov	r3, r1
 8003510:	4313      	orrs	r3, r2
 8003512:	d019      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800351c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003520:	d105      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003522:	4b50      	ldr	r3, [pc, #320]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	4a4f      	ldr	r2, [pc, #316]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800352e:	4b4d      	ldr	r3, [pc, #308]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003530:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003534:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800353c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003540:	4a48      	ldr	r2, [pc, #288]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003542:	430b      	orrs	r3, r1
 8003544:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003556:	2300      	movs	r3, #0
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800355a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800355e:	460b      	mov	r3, r1
 8003560:	4313      	orrs	r3, r2
 8003562:	d00c      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003564:	4b3f      	ldr	r3, [pc, #252]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800356a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800356e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003576:	493b      	ldr	r1, [pc, #236]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800357e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003590:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003594:	460b      	mov	r3, r1
 8003596:	4313      	orrs	r3, r2
 8003598:	d00c      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800359a:	4b32      	ldr	r3, [pc, #200]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800359c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035ac:	492d      	ldr	r1, [pc, #180]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80035b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035ca:	460b      	mov	r3, r1
 80035cc:	4313      	orrs	r3, r2
 80035ce:	d00c      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80035d0:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80035d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035d6:	f023 0218 	bic.w	r2, r3, #24
 80035da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035e2:	4920      	ldr	r1, [pc, #128]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003600:	460b      	mov	r3, r1
 8003602:	4313      	orrs	r3, r2
 8003604:	d034      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800360a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800360e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003612:	d105      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003614:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	4a12      	ldr	r2, [pc, #72]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800361a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800361e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003624:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003628:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800362c:	d108      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800362e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003632:	3308      	adds	r3, #8
 8003634:	4618      	mov	r0, r3
 8003636:	f001 fdd9 	bl	80051ec <RCCEx_PLL2_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8003640:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10f      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003648:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800364a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800364e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003656:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800365a:	4902      	ldr	r1, [pc, #8]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003662:	e005      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8003664:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800366c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d03a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800368c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003694:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003698:	d00e      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800369a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800369e:	d815      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d017      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80036a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a8:	d110      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036aa:	4b27      	ldr	r3, [pc, #156]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	4a26      	ldr	r2, [pc, #152]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80036b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80036b6:	e00e      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036bc:	3308      	adds	r3, #8
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fd94 	bl	80051ec <RCCEx_PLL2_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80036ca:	e004      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 80036d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80036d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80036de:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80036e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036f0:	4915      	ldr	r1, [pc, #84]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80036f8:	e003      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fa:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80036fe:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003718:	460b      	mov	r3, r1
 800371a:	4313      	orrs	r3, r2
 800371c:	d00c      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800371e:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003724:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800372c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003730:	4905      	ldr	r1, [pc, #20]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003738:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 800373c:	4618      	mov	r0, r3
 800373e:	37d8      	adds	r7, #216	@ 0xd8
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003746:	bf00      	nop
 8003748:	46020c00 	.word	0x46020c00

0800374c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	@ 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003754:	4ba6      	ldr	r3, [pc, #664]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800375e:	4ba4      	ldr	r3, [pc, #656]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003768:	4ba1      	ldr	r3, [pc, #644]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	3301      	adds	r3, #1
 8003774:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003776:	4b9e      	ldr	r3, [pc, #632]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003782:	4b9b      	ldr	r3, [pc, #620]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d062      	beq.n	800386a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	f200 8081 	bhi.w	80038ae <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d024      	beq.n	80037fc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d17a      	bne.n	80038ae <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80039f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b89      	ldr	r3, [pc, #548]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80037da:	ed97 6a02 	vldr	s12, [r7, #8]
 80037de:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80039f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037fa:	e08f      	b.n	800391c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80037fc:	4b7c      	ldr	r3, [pc, #496]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003808:	4b79      	ldr	r3, [pc, #484]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	0f1b      	lsrs	r3, r3, #28
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	e006      	b.n	8003822 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003814:	4b76      	ldr	r3, [pc, #472]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	0f1b      	lsrs	r3, r3, #28
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a76      	ldr	r2, [pc, #472]	@ (80039fc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003848:	ed97 6a02 	vldr	s12, [r7, #8]
 800384c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80039f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003858:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800385c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003864:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003868:	e058      	b.n	800391c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003874:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80039f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387c:	4b5c      	ldr	r3, [pc, #368]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800387e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800388c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003890:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80039f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003894:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003898:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800389c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ac:	e036      	b.n	800391c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80038ae:	4b50      	ldr	r3, [pc, #320]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80038ba:	4b4d      	ldr	r3, [pc, #308]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0f1b      	lsrs	r3, r3, #28
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80038c6:	4b4a      	ldr	r3, [pc, #296]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	0f1b      	lsrs	r3, r3, #28
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	4a49      	ldr	r2, [pc, #292]	@ (80039fc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80038d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80038fe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80039f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800391a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800391c:	4b34      	ldr	r3, [pc, #208]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d017      	beq.n	8003958 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003928:	4b31      	ldr	r3, [pc, #196]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800392a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392c:	0a5b      	lsrs	r3, r3, #9
 800392e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800393a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800393e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003942:	edd7 6a07 	vldr	s13, [r7, #28]
 8003946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800394a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800394e:	ee17 2a90 	vmov	r2, s15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e002      	b.n	800395e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800395e:	4b24      	ldr	r3, [pc, #144]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d017      	beq.n	800399a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800396a:	4b21      	ldr	r3, [pc, #132]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800396c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396e:	0c1b      	lsrs	r3, r3, #16
 8003970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800397c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003980:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003984:	edd7 6a07 	vldr	s13, [r7, #28]
 8003988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003990:	ee17 2a90 	vmov	r2, s15
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80039a0:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d017      	beq.n	80039dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80039ac:	4b10      	ldr	r3, [pc, #64]	@ (80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b0:	0e1b      	lsrs	r3, r3, #24
 80039b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80039be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80039c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d2:	ee17 2a90 	vmov	r2, s15
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80039da:	e002      	b.n	80039e2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
}
 80039e2:	bf00      	nop
 80039e4:	3724      	adds	r7, #36	@ 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	46020c00 	.word	0x46020c00
 80039f4:	4b742400 	.word	0x4b742400
 80039f8:	46000000 	.word	0x46000000
 80039fc:	08007584 	.word	0x08007584

08003a00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	@ 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003a08:	4ba6      	ldr	r3, [pc, #664]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a10:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003a12:	4ba4      	ldr	r3, [pc, #656]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003a1c:	4ba1      	ldr	r3, [pc, #644]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	3301      	adds	r3, #1
 8003a28:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003a2a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003a36:	4b9b      	ldr	r3, [pc, #620]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	08db      	lsrs	r3, r3, #3
 8003a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d062      	beq.n	8003b1e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	f200 8081 	bhi.w	8003b62 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d024      	beq.n	8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d17a      	bne.n	8003b62 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a76:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7e:	4b89      	ldr	r3, [pc, #548]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a92:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aae:	e08f      	b.n	8003bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003abc:	4b79      	ldr	r3, [pc, #484]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	0f1b      	lsrs	r3, r3, #28
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	e006      	b.n	8003ad6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8003ac8:	4b76      	ldr	r3, [pc, #472]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	0f1b      	lsrs	r3, r3, #28
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	4a76      	ldr	r2, [pc, #472]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003adc:	ee07 3a90 	vmov	s15, r3
 8003ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b00:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b1c:	e058      	b.n	8003bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b28:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b30:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b40:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b44:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b60:	e036      	b.n	8003bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003b62:	4b50      	ldr	r3, [pc, #320]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8003b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0f1b      	lsrs	r3, r3, #28
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	e006      	b.n	8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	0f1b      	lsrs	r3, r3, #28
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	4a49      	ldr	r2, [pc, #292]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bb2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bce:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003bd0:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bdc:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be0:	0a5b      	lsrs	r3, r3, #9
 8003be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003bee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c02:	ee17 2a90 	vmov	r2, s15
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e002      	b.n	8003c12 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003c12:	4b24      	ldr	r3, [pc, #144]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d017      	beq.n	8003c4e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c1e:	4b21      	ldr	r3, [pc, #132]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003c30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c34:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c44:	ee17 2a90 	vmov	r2, s15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	e002      	b.n	8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003c54:	4b13      	ldr	r3, [pc, #76]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d017      	beq.n	8003c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c60:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c64:	0e1b      	lsrs	r3, r3, #24
 8003c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c76:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c86:	ee17 2a90 	vmov	r2, s15
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c8e:	e002      	b.n	8003c96 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
}
 8003c96:	bf00      	nop
 8003c98:	3724      	adds	r7, #36	@ 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	46020c00 	.word	0x46020c00
 8003ca8:	4b742400 	.word	0x4b742400
 8003cac:	46000000 	.word	0x46000000
 8003cb0:	08007584 	.word	0x08007584

08003cb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	@ 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003cbc:	4ba6      	ldr	r3, [pc, #664]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003cc6:	4ba4      	ldr	r3, [pc, #656]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003cd0:	4ba1      	ldr	r3, [pc, #644]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3301      	adds	r3, #1
 8003cdc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003cde:	4b9e      	ldr	r3, [pc, #632]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003cea:	4b9b      	ldr	r3, [pc, #620]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cee:	08db      	lsrs	r3, r3, #3
 8003cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d062      	beq.n	8003dd2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	f200 8081 	bhi.w	8003e16 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d024      	beq.n	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d17a      	bne.n	8003e16 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003f5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d32:	4b89      	ldr	r3, [pc, #548]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d46:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8003d62:	e08f      	b.n	8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003d64:	4b7c      	ldr	r3, [pc, #496]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8003d70:	4b79      	ldr	r3, [pc, #484]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	0f1b      	lsrs	r3, r3, #28
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	e006      	b.n	8003d8a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8003d7c:	4b76      	ldr	r3, [pc, #472]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	0f1b      	lsrs	r3, r3, #28
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a76      	ldr	r2, [pc, #472]	@ (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	ee07 3a90 	vmov	s15, r3
 8003dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003db4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003db8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dd0:	e058      	b.n	8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ddc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de4:	4b5c      	ldr	r3, [pc, #368]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003df4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e14:	e036      	b.n	8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003e16:	4b50      	ldr	r3, [pc, #320]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8003e22:	4b4d      	ldr	r3, [pc, #308]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	0f1b      	lsrs	r3, r3, #28
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	e006      	b.n	8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	0f1b      	lsrs	r3, r3, #28
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	4a49      	ldr	r2, [pc, #292]	@ (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e66:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e82:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003e84:	4b34      	ldr	r3, [pc, #208]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d017      	beq.n	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e90:	4b31      	ldr	r3, [pc, #196]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e94:	0a5b      	lsrs	r3, r3, #9
 8003e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003ea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb6:	ee17 2a90 	vmov	r2, s15
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e002      	b.n	8003ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003ec6:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ed2:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003ee4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ee8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef8:	ee17 2a90 	vmov	r2, s15
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003f08:	4b13      	ldr	r3, [pc, #76]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f14:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f18:	0e1b      	lsrs	r3, r3, #24
 8003f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f3a:	ee17 2a90 	vmov	r2, s15
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f42:	e002      	b.n	8003f4a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
}
 8003f4a:	bf00      	nop
 8003f4c:	3724      	adds	r7, #36	@ 0x24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	46020c00 	.word	0x46020c00
 8003f5c:	4b742400 	.word	0x4b742400
 8003f60:	46000000 	.word	0x46000000
 8003f64:	08007584 	.word	0x08007584

08003f68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08e      	sub	sp, #56	@ 0x38
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f76:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	d145      	bne.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003f7e:	4b9b      	ldr	r3, [pc, #620]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f88:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003f8a:	4b98      	ldr	r3, [pc, #608]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d108      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f9e:	d104      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa6:	f001 b912 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003faa:	4b90      	ldr	r3, [pc, #576]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fb8:	d114      	bne.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc0:	d110      	bne.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003fc2:	4b8a      	ldr	r3, [pc, #552]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fd0:	d103      	bne.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8003fd2:	23fa      	movs	r3, #250	@ 0xfa
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003fd6:	f001 b8fa 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8003fda:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003fe0:	f001 b8f5 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003fe4:	4b81      	ldr	r3, [pc, #516]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ff0:	d107      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ff8:	d103      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ffe:	f001 b8e6 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34
 8004006:	f001 b8e2 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800400a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800400e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004012:	430b      	orrs	r3, r1
 8004014:	d151      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004016:	4b75      	ldr	r3, [pc, #468]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004018:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800401c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004020:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	2b80      	cmp	r3, #128	@ 0x80
 8004026:	d035      	beq.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	2b80      	cmp	r3, #128	@ 0x80
 800402c:	d841      	bhi.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	2b60      	cmp	r3, #96	@ 0x60
 8004032:	d02a      	beq.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	2b60      	cmp	r3, #96	@ 0x60
 8004038:	d83b      	bhi.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	2b40      	cmp	r3, #64	@ 0x40
 800403e:	d009      	beq.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	2b40      	cmp	r3, #64	@ 0x40
 8004044:	d835      	bhi.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00c      	beq.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800404c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404e:	2b20      	cmp	r3, #32
 8004050:	d012      	beq.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004052:	e02e      	b.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fb77 	bl	800374c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004062:	f001 b8b4 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004066:	f107 0318 	add.w	r3, r7, #24
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fcc8 	bl	8003a00 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004074:	f001 b8ab 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004078:	f107 030c 	add.w	r3, r7, #12
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fe19 	bl	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004086:	f001 b8a2 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800408a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800408e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004090:	f001 b89d 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004094:	4b55      	ldr	r3, [pc, #340]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a0:	d103      	bne.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80040a2:	4b54      	ldr	r3, [pc, #336]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80040a6:	f001 b892 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040ae:	f001 b88e 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040b6:	f001 b88a 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80040ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040be:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80040c2:	430b      	orrs	r3, r1
 80040c4:	d126      	bne.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80040c6:	4b49      	ldr	r3, [pc, #292]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80040c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80040d2:	4b46      	ldr	r3, [pc, #280]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040de:	d106      	bne.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80040e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 80040e6:	4b43      	ldr	r3, [pc, #268]	@ (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80040e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ea:	f001 b870 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80040ee:	4b3f      	ldr	r3, [pc, #252]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fa:	d107      	bne.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80040fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004102:	d103      	bne.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004104:	4b3c      	ldr	r3, [pc, #240]	@ (80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004106:	637b      	str	r3, [r7, #52]	@ 0x34
 8004108:	f001 b861 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004110:	f001 b85d 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004118:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800411c:	430b      	orrs	r3, r1
 800411e:	d171      	bne.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004120:	4b32      	ldr	r3, [pc, #200]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004126:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800412a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004132:	d034      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800413a:	d853      	bhi.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004142:	d00b      	beq.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800414a:	d84b      	bhi.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004158:	d009      	beq.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800415a:	e043      	b.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800415c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff faf3 	bl	800374c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800416a:	f001 b830 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800416e:	f107 0318 	add.w	r3, r7, #24
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fc44 	bl	8003a00 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800417c:	f001 b827 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004180:	4b1a      	ldr	r3, [pc, #104]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800418c:	d103      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 800418e:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004190:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004192:	f001 b81c 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800419a:	f001 b818 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800419e:	4b13      	ldr	r3, [pc, #76]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d118      	bne.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80041aa:	4b10      	ldr	r3, [pc, #64]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80041b6:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	0e1b      	lsrs	r3, r3, #24
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	e006      	b.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 80041c2:	4b0a      	ldr	r3, [pc, #40]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80041c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	0e1b      	lsrs	r3, r3, #24
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80041d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80041d8:	f000 bff9 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041e0:	f000 bff5 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041e8:	f000 bff1 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80041ec:	46020c00 	.word	0x46020c00
 80041f0:	0007a120 	.word	0x0007a120
 80041f4:	00f42400 	.word	0x00f42400
 80041f8:	007a1200 	.word	0x007a1200
 80041fc:	02dc6c00 	.word	0x02dc6c00
 8004200:	08007584 	.word	0x08007584
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004208:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800420c:	430b      	orrs	r3, r1
 800420e:	d17f      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004210:	4ba8      	ldr	r3, [pc, #672]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004212:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800421a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	2b00      	cmp	r3, #0
 8004220:	d165      	bne.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004222:	4ba4      	ldr	r3, [pc, #656]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004228:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800422c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004234:	d034      	beq.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800423c:	d853      	bhi.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004244:	d00b      	beq.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800424c:	d84b      	bhi.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800424e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004250:	2b00      	cmp	r3, #0
 8004252:	d016      	beq.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800425a:	d009      	beq.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800425c:	e043      	b.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800425e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fa72 	bl	800374c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800426c:	f000 bfaf 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004270:	f107 0318 	add.w	r3, r7, #24
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fbc3 	bl	8003a00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800427e:	f000 bfa6 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004282:	4b8c      	ldr	r3, [pc, #560]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800428e:	d103      	bne.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8004290:	4b89      	ldr	r3, [pc, #548]	@ (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8004292:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004294:	f000 bf9b 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800429c:	f000 bf97 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80042a0:	4b84      	ldr	r3, [pc, #528]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d118      	bne.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042ac:	4b81      	ldr	r3, [pc, #516]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80042b8:	4b7e      	ldr	r3, [pc, #504]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	0e1b      	lsrs	r3, r3, #24
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	e006      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80042c4:	4b7b      	ldr	r3, [pc, #492]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80042c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	0e1b      	lsrs	r3, r3, #24
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	4a7a      	ldr	r2, [pc, #488]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80042d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80042da:	f000 bf78 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80042e2:	f000 bf74 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80042ea:	f000 bf70 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042f4:	d108      	bne.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fa26 	bl	800374c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	637b      	str	r3, [r7, #52]	@ 0x34
 8004304:	f000 bf63 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	637b      	str	r3, [r7, #52]	@ 0x34
 800430c:	f000 bf5f 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004314:	1e51      	subs	r1, r2, #1
 8004316:	430b      	orrs	r3, r1
 8004318:	d136      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800431a:	4b66      	ldr	r3, [pc, #408]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800431c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800432c:	f7fe fc22 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8004330:	6378      	str	r0, [r7, #52]	@ 0x34
 8004332:	f000 bf4c 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	2b01      	cmp	r3, #1
 800433a:	d104      	bne.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800433c:	f7fe faea 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8004340:	6378      	str	r0, [r7, #52]	@ 0x34
 8004342:	f000 bf44 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004346:	4b5b      	ldr	r3, [pc, #364]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004352:	d106      	bne.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	2b02      	cmp	r3, #2
 8004358:	d103      	bne.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 800435a:	4b59      	ldr	r3, [pc, #356]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800435c:	637b      	str	r3, [r7, #52]	@ 0x34
 800435e:	f000 bf36 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004362:	4b54      	ldr	r3, [pc, #336]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	d107      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	2b03      	cmp	r3, #3
 8004374:	d104      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8004376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800437a:	637b      	str	r3, [r7, #52]	@ 0x34
 800437c:	f000 bf27 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	637b      	str	r3, [r7, #52]	@ 0x34
 8004384:	f000 bf23 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800438c:	1f11      	subs	r1, r2, #4
 800438e:	430b      	orrs	r3, r1
 8004390:	d136      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004392:	4b48      	ldr	r3, [pc, #288]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004398:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800439c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7fe fbd2 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 80043a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80043aa:	f000 bf10 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d104      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80043b4:	f7fe faae 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80043b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80043ba:	f000 bf08 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80043be:	4b3d      	ldr	r3, [pc, #244]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ca:	d106      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80043cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d103      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 80043d2:	4b3b      	ldr	r3, [pc, #236]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d6:	f000 befa 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80043da:	4b36      	ldr	r3, [pc, #216]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80043dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d107      	bne.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	2b30      	cmp	r3, #48	@ 0x30
 80043ec:	d104      	bne.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 80043ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043f4:	f000 beeb 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80043fc:	f000 bee7 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004404:	f1a2 0108 	sub.w	r1, r2, #8
 8004408:	430b      	orrs	r3, r1
 800440a:	d136      	bne.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800440c:	4b29      	ldr	r3, [pc, #164]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800440e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004412:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004416:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800441e:	f7fe fb95 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8004422:	6378      	str	r0, [r7, #52]	@ 0x34
 8004424:	f000 bed3 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	2b40      	cmp	r3, #64	@ 0x40
 800442c:	d104      	bne.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800442e:	f7fe fa71 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8004432:	6378      	str	r0, [r7, #52]	@ 0x34
 8004434:	f000 becb 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004438:	4b1e      	ldr	r3, [pc, #120]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004444:	d106      	bne.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004448:	2b80      	cmp	r3, #128	@ 0x80
 800444a:	d103      	bne.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 800444c:	4b1c      	ldr	r3, [pc, #112]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800444e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004450:	f000 bebd 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004454:	4b17      	ldr	r3, [pc, #92]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d107      	bne.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004464:	2bc0      	cmp	r3, #192	@ 0xc0
 8004466:	d104      	bne.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8004468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800446c:	637b      	str	r3, [r7, #52]	@ 0x34
 800446e:	f000 beae 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	637b      	str	r3, [r7, #52]	@ 0x34
 8004476:	f000 beaa 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800447a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800447e:	f1a2 0110 	sub.w	r1, r2, #16
 8004482:	430b      	orrs	r3, r1
 8004484:	d141      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004486:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800448c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004490:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	2b00      	cmp	r3, #0
 8004496:	d104      	bne.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004498:	f7fe fb58 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 800449c:	6378      	str	r0, [r7, #52]	@ 0x34
 800449e:	f000 be96 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80044aa:	f7fe fa33 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80044ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80044b0:	f000 be8d 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80044b4:	46020c00 	.word	0x46020c00
 80044b8:	02dc6c00 	.word	0x02dc6c00
 80044bc:	08007584 	.word	0x08007584
 80044c0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80044c4:	4baa      	ldr	r3, [pc, #680]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d0:	d107      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d8:	d103      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80044da:	4ba6      	ldr	r3, [pc, #664]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80044dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044de:	f000 be76 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80044e2:	4ba3      	ldr	r3, [pc, #652]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80044e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d108      	bne.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044f6:	d104      	bne.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 80044f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044fe:	f000 be66 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
 8004506:	f000 be62 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800450a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800450e:	f1a2 0120 	sub.w	r1, r2, #32
 8004512:	430b      	orrs	r3, r1
 8004514:	d158      	bne.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004516:	4b96      	ldr	r3, [pc, #600]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004528:	f7fe fb38 	bl	8002b9c <HAL_RCC_GetPCLK3Freq>
 800452c:	6378      	str	r0, [r7, #52]	@ 0x34
 800452e:	f000 be4e 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	2b01      	cmp	r3, #1
 8004536:	d104      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004538:	f7fe f9ec 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 800453c:	6378      	str	r0, [r7, #52]	@ 0x34
 800453e:	f000 be46 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004542:	4b8b      	ldr	r3, [pc, #556]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800454e:	d106      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	2b02      	cmp	r3, #2
 8004554:	d103      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8004556:	4b87      	ldr	r3, [pc, #540]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004558:	637b      	str	r3, [r7, #52]	@ 0x34
 800455a:	f000 be38 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800455e:	4b84      	ldr	r3, [pc, #528]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b02      	cmp	r3, #2
 800456a:	d107      	bne.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456e:	2b03      	cmp	r3, #3
 8004570:	d104      	bne.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8004572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004576:	637b      	str	r3, [r7, #52]	@ 0x34
 8004578:	f000 be29 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800457c:	4b7c      	ldr	r3, [pc, #496]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b20      	cmp	r3, #32
 8004586:	d11b      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	2b04      	cmp	r3, #4
 800458c:	d118      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800458e:	4b78      	ldr	r3, [pc, #480]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 800459a:	4b75      	ldr	r3, [pc, #468]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	0e1b      	lsrs	r3, r3, #24
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	e006      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80045a6:	4b72      	ldr	r3, [pc, #456]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80045a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045ac:	041b      	lsls	r3, r3, #16
 80045ae:	0e1b      	lsrs	r3, r3, #24
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	4a70      	ldr	r2, [pc, #448]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80045b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80045bc:	f000 be07 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c4:	f000 be03 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80045c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045cc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80045d0:	430b      	orrs	r3, r1
 80045d2:	d16c      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80045d4:	4b66      	ldr	r3, [pc, #408]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80045d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045da:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80045de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e6:	d104      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045e8:	f7fe f994 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80045ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80045ee:	f000 bdee 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80045f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f8:	d108      	bne.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045fa:	f107 0318 	add.w	r3, r7, #24
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff f9fe 	bl	8003a00 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	637b      	str	r3, [r7, #52]	@ 0x34
 8004608:	f000 bde1 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800460c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004612:	f7fe fa81 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8004616:	6378      	str	r0, [r7, #52]	@ 0x34
 8004618:	f000 bdd9 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004622:	d122      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004624:	4b52      	ldr	r3, [pc, #328]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b20      	cmp	r3, #32
 800462e:	d118      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004630:	4b4f      	ldr	r3, [pc, #316]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800463c:	4b4c      	ldr	r3, [pc, #304]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	0e1b      	lsrs	r3, r3, #24
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	e006      	b.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004648:	4b49      	ldr	r3, [pc, #292]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800464a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	0e1b      	lsrs	r3, r3, #24
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	4a48      	ldr	r2, [pc, #288]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
 800465e:	f000 bdb6 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	637b      	str	r3, [r7, #52]	@ 0x34
 8004666:	f000 bdb2 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800466a:	4b41      	ldr	r3, [pc, #260]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004676:	d107      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800467e:	d103      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8004680:	4b3c      	ldr	r3, [pc, #240]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004682:	637b      	str	r3, [r7, #52]	@ 0x34
 8004684:	f000 bda3 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004688:	4b39      	ldr	r3, [pc, #228]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004694:	d107      	bne.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800469c:	d103      	bne.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 800469e:	4b35      	ldr	r3, [pc, #212]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80046a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a2:	f000 bd94 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046aa:	f000 bd90 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80046ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80046b6:	430b      	orrs	r3, r1
 80046b8:	d160      	bne.n	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80046ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80046bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d84c      	bhi.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80046cc:	a201      	add	r2, pc, #4	@ (adr r2, 80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	0800470d 	.word	0x0800470d
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	080046fb 	.word	0x080046fb
 80046e0:	08004717 	.word	0x08004717
 80046e4:	08004721 	.word	0x08004721
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff f82d 	bl	800374c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046f6:	f000 bd6a 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046fa:	f107 030c 	add.w	r3, r7, #12
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fad8 	bl	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004708:	f000 bd61 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800470c:	f7fe fa04 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8004710:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004712:	f000 bd5c 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004716:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800471a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800471c:	f000 bd57 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004720:	4b13      	ldr	r3, [pc, #76]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d118      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800472c:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004738:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	0e1b      	lsrs	r3, r3, #24
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	e006      	b.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8004744:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	0e1b      	lsrs	r3, r3, #24
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	4a09      	ldr	r2, [pc, #36]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800475a:	f000 bd38 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004762:	f000 bd34 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800476a:	f000 bd30 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800476e:	bf00      	nop
 8004770:	46020c00 	.word	0x46020c00
 8004774:	00f42400 	.word	0x00f42400
 8004778:	08007584 	.word	0x08007584
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800477c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004780:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004784:	430b      	orrs	r3, r1
 8004786:	d167      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004788:	4ba0      	ldr	r3, [pc, #640]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800478a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800478e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004792:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800479a:	d036      	beq.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047a2:	d855      	bhi.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80047a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047aa:	d029      	beq.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80047ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047b2:	d84d      	bhi.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047ba:	d013      	beq.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047c2:	d845      	bhi.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80047c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d015      	beq.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d0:	d13e      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe ffb8 	bl	800374c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047e0:	f000 bcf5 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047e4:	f107 030c 	add.w	r3, r7, #12
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fa63 	bl	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047f2:	f000 bcec 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80047f6:	f7fe f98f 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 80047fa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80047fc:	f000 bce7 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004800:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004806:	f000 bce2 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800480a:	4b80      	ldr	r3, [pc, #512]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b20      	cmp	r3, #32
 8004814:	d118      	bne.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004816:	4b7d      	ldr	r3, [pc, #500]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004822:	4b7a      	ldr	r3, [pc, #488]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0e1b      	lsrs	r3, r3, #24
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	e006      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800482e:	4b77      	ldr	r3, [pc, #476]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	0e1b      	lsrs	r3, r3, #24
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	4a74      	ldr	r2, [pc, #464]	@ (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004844:	f000 bcc3 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800484c:	f000 bcbf 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004854:	f000 bcbb 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800485c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004860:	430b      	orrs	r3, r1
 8004862:	d14c      	bne.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004864:	4b69      	ldr	r3, [pc, #420]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800486a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800486e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004876:	f7fe f969 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 800487a:	6378      	str	r0, [r7, #52]	@ 0x34
 800487c:	f000 bca7 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004886:	d104      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004888:	f7fe f844 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 800488c:	6378      	str	r0, [r7, #52]	@ 0x34
 800488e:	f000 bc9e 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004892:	4b5e      	ldr	r3, [pc, #376]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489e:	d107      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a6:	d103      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80048a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80048aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ac:	f000 bc8f 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80048b0:	4b56      	ldr	r3, [pc, #344]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d11c      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048c2:	d118      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80048c4:	4b51      	ldr	r3, [pc, #324]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80048d0:	4b4e      	ldr	r3, [pc, #312]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	0e1b      	lsrs	r3, r3, #24
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	e006      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80048dc:	4b4b      	ldr	r3, [pc, #300]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80048de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	0e1b      	lsrs	r3, r3, #24
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	4a49      	ldr	r2, [pc, #292]	@ (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80048ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f2:	f000 bc6c 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048fa:	f000 bc68 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80048fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004902:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004906:	430b      	orrs	r3, r1
 8004908:	d14c      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800490a:	4b40      	ldr	r3, [pc, #256]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800490c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004910:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004914:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d104      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800491c:	f7fe f916 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8004920:	6378      	str	r0, [r7, #52]	@ 0x34
 8004922:	f000 bc54 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492c:	d104      	bne.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800492e:	f7fd fff1 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8004932:	6378      	str	r0, [r7, #52]	@ 0x34
 8004934:	f000 bc4b 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004938:	4b34      	ldr	r3, [pc, #208]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004944:	d107      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494c:	d103      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 800494e:	4b31      	ldr	r3, [pc, #196]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004950:	637b      	str	r3, [r7, #52]	@ 0x34
 8004952:	f000 bc3c 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004956:	4b2d      	ldr	r3, [pc, #180]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b20      	cmp	r3, #32
 8004960:	d11c      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004968:	d118      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800496a:	4b28      	ldr	r3, [pc, #160]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004976:	4b25      	ldr	r3, [pc, #148]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0e1b      	lsrs	r3, r3, #24
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	e006      	b.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8004982:	4b22      	ldr	r3, [pc, #136]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	0e1b      	lsrs	r3, r3, #24
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	4a1f      	ldr	r2, [pc, #124]	@ (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8004992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
 8004998:	f000 bc19 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a0:	f000 bc15 	b.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80049a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a8:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80049ac:	430b      	orrs	r3, r1
 80049ae:	d157      	bne.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80049b0:	4b16      	ldr	r3, [pc, #88]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80049b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	2bc0      	cmp	r3, #192	@ 0xc0
 80049c0:	d02a      	beq.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80049c6:	d848      	bhi.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	2b80      	cmp	r3, #128	@ 0x80
 80049cc:	d00d      	beq.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	2b80      	cmp	r3, #128	@ 0x80
 80049d2:	d842      	bhi.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	2b40      	cmp	r3, #64	@ 0x40
 80049de:	d011      	beq.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80049e0:	e03b      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80049e2:	f7fe f8db 	bl	8002b9c <HAL_RCC_GetPCLK3Freq>
 80049e6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80049e8:	e3f1      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049ea:	4b08      	ldr	r3, [pc, #32]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f6:	d102      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80049f8:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80049fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80049fc:	e3e7      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a02:	e3e4      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004a04:	f7fd ff86 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8004a08:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004a0a:	e3e0      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004a0c:	46020c00 	.word	0x46020c00
 8004a10:	08007584 	.word	0x08007584
 8004a14:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a18:	4ba3      	ldr	r3, [pc, #652]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d117      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a24:	4ba0      	ldr	r3, [pc, #640]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8004a30:	4b9d      	ldr	r3, [pc, #628]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	0e1b      	lsrs	r3, r3, #24
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	e006      	b.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8004a3c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	0e1b      	lsrs	r3, r3, #24
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	4a98      	ldr	r2, [pc, #608]	@ (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a52:	e3bc      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a58:	e3b9      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a5e:	e3b6      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a64:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	d147      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a76:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a7e:	f7fe f865 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8004a82:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a84:	e3a3      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a8c:	d103      	bne.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fd ff41 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8004a92:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a94:	e39b      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004a96:	4b84      	ldr	r3, [pc, #528]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa2:	d106      	bne.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aaa:	d102      	bne.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8004aac:	4b80      	ldr	r3, [pc, #512]	@ (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ab0:	e38d      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004ab2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d11b      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ac4:	d117      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ac6:	4b78      	ldr	r3, [pc, #480]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8004ad2:	4b75      	ldr	r3, [pc, #468]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0e1b      	lsrs	r3, r3, #24
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	e006      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8004ade:	4b72      	ldr	r3, [pc, #456]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	0e1b      	lsrs	r3, r3, #24
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	4a6f      	ldr	r2, [pc, #444]	@ (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af4:	e36b      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afa:	e368      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b00:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8004b04:	430b      	orrs	r3, r1
 8004b06:	d164      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004b08:	4b67      	ldr	r3, [pc, #412]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d120      	bne.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b1a:	4b63      	ldr	r3, [pc, #396]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d117      	bne.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b26:	4b60      	ldr	r3, [pc, #384]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8004b32:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0e1b      	lsrs	r3, r3, #24
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	e006      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8004b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	0e1b      	lsrs	r3, r3, #24
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	4a57      	ldr	r2, [pc, #348]	@ (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b54:	e33b      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5a:	e338      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004b5c:	4b52      	ldr	r3, [pc, #328]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b6a:	d112      	bne.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b72:	d10e      	bne.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b74:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b82:	d102      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8004b84:	23fa      	movs	r3, #250	@ 0xfa
 8004b86:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b88:	e321      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004b8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b8e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b90:	e31d      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004b92:	4b45      	ldr	r3, [pc, #276]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9e:	d106      	bne.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba6:	d102      	bne.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8004ba8:	4b41      	ldr	r3, [pc, #260]	@ (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bac:	e30f      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004bae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d107      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bc2:	d103      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8004bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bca:	e300      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd0:	e2fd      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bd6:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	d16a      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004bde:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004be4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004be8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d120      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d117      	bne.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004c08:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	0e1b      	lsrs	r3, r3, #24
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	e006      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8004c14:	4b24      	ldr	r3, [pc, #144]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	0e1b      	lsrs	r3, r3, #24
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	4a22      	ldr	r2, [pc, #136]	@ (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c2a:	e2d0      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c30:	e2cd      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004c32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c40:	d112      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c48:	d10e      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c4a:	4b17      	ldr	r3, [pc, #92]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c58:	d102      	bne.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8004c5a:	23fa      	movs	r3, #250	@ 0xfa
 8004c5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c5e:	e2b6      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004c60:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c66:	e2b2      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004c68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c74:	d106      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c7c:	d102      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c82:	e2a4      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c98:	d103      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8004c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca0:	e295      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca6:	e292      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004ca8:	46020c00 	.word	0x46020c00
 8004cac:	08007584 	.word	0x08007584
 8004cb0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	d147      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cc0:	4b9a      	ldr	r3, [pc, #616]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cc6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004cca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004cd2:	f7fd ff3b 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8004cd6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004cd8:	e279      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004cda:	4b94      	ldr	r3, [pc, #592]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce8:	d112      	bne.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cf0:	d10e      	bne.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004cf2:	4b8e      	ldr	r3, [pc, #568]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d00:	d102      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8004d02:	23fa      	movs	r3, #250	@ 0xfa
 8004d04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d06:	e262      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d0e:	e25e      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004d10:	4b86      	ldr	r3, [pc, #536]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1c:	d106      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d24:	d102      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8004d26:	4b82      	ldr	r3, [pc, #520]	@ (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2a:	e250      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004d2c:	4b7f      	ldr	r3, [pc, #508]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d107      	bne.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d40:	d103      	bne.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8004d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d48:	e241      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4e:	e23e      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d54:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	d12d      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004d5c:	4b73      	ldr	r3, [pc, #460]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d62:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004d68:	4b70      	ldr	r3, [pc, #448]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d74:	d105      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8004d7c:	4b6c      	ldr	r3, [pc, #432]	@ (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d80:	e225      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d88:	d107      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fcdc 	bl	800374c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d98:	e219      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004da0:	d107      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004da2:	f107 0318 	add.w	r3, r7, #24
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fe2a 	bl	8003a00 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db0:	e20d      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db6:	e20a      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dbc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	d156      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004dc4:	4b59      	ldr	r3, [pc, #356]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004dce:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dd6:	d028      	beq.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dde:	d845      	bhi.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004de6:	d013      	beq.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dee:	d83d      	bhi.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dfc:	d004      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8004dfe:	e035      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004e00:	f7fd feb8 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8004e04:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004e06:	e1e2      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004e08:	f7fd fd84 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8004e0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004e0e:	e1de      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e10:	4b46      	ldr	r3, [pc, #280]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e1c:	d102      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8004e1e:	4b44      	ldr	r3, [pc, #272]	@ (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004e20:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e22:	e1d4      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e28:	e1d1      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e2a:	4b40      	ldr	r3, [pc, #256]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d117      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e36:	4b3d      	ldr	r3, [pc, #244]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8004e42:	4b3a      	ldr	r3, [pc, #232]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	0e1b      	lsrs	r3, r3, #24
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	e006      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8004e4e:	4b37      	ldr	r3, [pc, #220]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e54:	041b      	lsls	r3, r3, #16
 8004e56:	0e1b      	lsrs	r3, r3, #24
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	4a35      	ldr	r2, [pc, #212]	@ (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8004e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e64:	e1b3      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e6a:	e1b0      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e70:	e1ad      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e76:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	d15c      	bne.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e88:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e90:	d028      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e98:	d845      	bhi.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ea0:	d013      	beq.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ea8:	d83d      	bhi.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb6:	d004      	beq.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8004eb8:	e035      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004eba:	f7fd fe47 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8004ebe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004ec0:	e185      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004ec2:	f7fd fd27 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8004ec6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004ec8:	e181      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004eca:	4b18      	ldr	r3, [pc, #96]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ed6:	d102      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8004ed8:	4b15      	ldr	r3, [pc, #84]	@ (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004eda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004edc:	e177      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ee2:	e174      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004ee4:	4b11      	ldr	r3, [pc, #68]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d117      	bne.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8004efc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	0e1b      	lsrs	r3, r3, #24
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	e006      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8004f08:	4b08      	ldr	r3, [pc, #32]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	0e1b      	lsrs	r3, r3, #24
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	4a07      	ldr	r2, [pc, #28]	@ (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f1e:	e156      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f24:	e153      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f2a:	e150      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004f2c:	46020c00 	.word	0x46020c00
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	08007584 	.word	0x08007584
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8004f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f3c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8004f40:	430b      	orrs	r3, r1
 8004f42:	d176      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004f44:	4ba4      	ldr	r3, [pc, #656]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f4a:	f003 0318 	and.w	r3, r3, #24
 8004f4e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	2b18      	cmp	r3, #24
 8004f54:	d86a      	bhi.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8004f56:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004fc1 	.word	0x08004fc1
 8004f60:	0800502d 	.word	0x0800502d
 8004f64:	0800502d 	.word	0x0800502d
 8004f68:	0800502d 	.word	0x0800502d
 8004f6c:	0800502d 	.word	0x0800502d
 8004f70:	0800502d 	.word	0x0800502d
 8004f74:	0800502d 	.word	0x0800502d
 8004f78:	0800502d 	.word	0x0800502d
 8004f7c:	08004fc9 	.word	0x08004fc9
 8004f80:	0800502d 	.word	0x0800502d
 8004f84:	0800502d 	.word	0x0800502d
 8004f88:	0800502d 	.word	0x0800502d
 8004f8c:	0800502d 	.word	0x0800502d
 8004f90:	0800502d 	.word	0x0800502d
 8004f94:	0800502d 	.word	0x0800502d
 8004f98:	0800502d 	.word	0x0800502d
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	0800502d 	.word	0x0800502d
 8004fa4:	0800502d 	.word	0x0800502d
 8004fa8:	0800502d 	.word	0x0800502d
 8004fac:	0800502d 	.word	0x0800502d
 8004fb0:	0800502d 	.word	0x0800502d
 8004fb4:	0800502d 	.word	0x0800502d
 8004fb8:	0800502d 	.word	0x0800502d
 8004fbc:	08004feb 	.word	0x08004feb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8004fc0:	f7fd fdec 	bl	8002b9c <HAL_RCC_GetPCLK3Freq>
 8004fc4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004fc6:	e102      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004fc8:	f7fd fca4 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8004fcc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004fce:	e0fe      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fd0:	4b81      	ldr	r3, [pc, #516]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fdc:	d102      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8004fde:	4b7f      	ldr	r3, [pc, #508]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8004fe0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fe2:	e0f4      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fe8:	e0f1      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004fea:	4b7b      	ldr	r3, [pc, #492]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d117      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ff6:	4b78      	ldr	r3, [pc, #480]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005002:	4b75      	ldr	r3, [pc, #468]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0e1b      	lsrs	r3, r3, #24
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	e006      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 800500e:	4b72      	ldr	r3, [pc, #456]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	0e1b      	lsrs	r3, r3, #24
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	4a70      	ldr	r2, [pc, #448]	@ (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800501e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005022:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005024:	e0d3      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800502a:	e0d0      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005030:	e0cd      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005036:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800503a:	430b      	orrs	r3, r1
 800503c:	d155      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800503e:	4b66      	ldr	r3, [pc, #408]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005044:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005048:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005050:	d013      	beq.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8005052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005054:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005058:	d844      	bhi.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005060:	d013      	beq.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8005062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005064:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005068:	d83c      	bhi.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 800506a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506c:	2b00      	cmp	r3, #0
 800506e:	d014      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005076:	d014      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005078:	e034      	b.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800507a:	f107 0318 	add.w	r3, r7, #24
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe fcbe 	bl	8003a00 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005088:	e0a1      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800508a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fb5c 	bl	800374c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005098:	e099      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800509a:	f7fd fc3b 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 800509e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80050a0:	e095      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80050a2:	4b4d      	ldr	r3, [pc, #308]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d117      	bne.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050ae:	4b4a      	ldr	r3, [pc, #296]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 80050ba:	4b47      	ldr	r3, [pc, #284]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	0e1b      	lsrs	r3, r3, #24
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 80050c6:	4b44      	ldr	r3, [pc, #272]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80050c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050cc:	041b      	lsls	r3, r3, #16
 80050ce:	0e1b      	lsrs	r3, r3, #24
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	4a42      	ldr	r2, [pc, #264]	@ (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80050d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80050dc:	e077      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050e2:	e074      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050e8:	e071      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80050ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ee:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80050f2:	430b      	orrs	r3, r1
 80050f4:	d131      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80050f6:	4b38      	ldr	r3, [pc, #224]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80050f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005100:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005102:	4b35      	ldr	r3, [pc, #212]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b02      	cmp	r3, #2
 800510e:	d106      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	2b00      	cmp	r3, #0
 8005114:	d103      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8005116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511a:	637b      	str	r3, [r7, #52]	@ 0x34
 800511c:	e057      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800511e:	4b2e      	ldr	r3, [pc, #184]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800512c:	d112      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005134:	d10e      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005136:	4b28      	ldr	r3, [pc, #160]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800513c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005144:	d102      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8005146:	23fa      	movs	r3, #250	@ 0xfa
 8005148:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800514a:	e040      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800514c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005150:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005152:	e03c      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	637b      	str	r3, [r7, #52]	@ 0x34
 8005158:	e039      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800515a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800515e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005162:	430b      	orrs	r3, r1
 8005164:	d131      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005166:	4b1c      	ldr	r3, [pc, #112]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005168:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800516c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005170:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005172:	4b19      	ldr	r3, [pc, #100]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800517a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8005186:	4b17      	ldr	r3, [pc, #92]	@ (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005188:	637b      	str	r3, [r7, #52]	@ 0x34
 800518a:	e020      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800518c:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005198:	d106      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 800519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a0:	d102      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 80051a2:	4b11      	ldr	r3, [pc, #68]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80051a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a6:	e012      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80051a8:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b4:	d106      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 80051b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051bc:	d102      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 80051be:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 80051c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c2:	e004      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c8:	e001      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80051ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3738      	adds	r7, #56	@ 0x38
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	46020c00 	.word	0x46020c00
 80051dc:	00f42400 	.word	0x00f42400
 80051e0:	08007584 	.word	0x08007584
 80051e4:	02dc6c00 	.word	0x02dc6c00
 80051e8:	016e3600 	.word	0x016e3600

080051ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80051f4:	4b47      	ldr	r3, [pc, #284]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a46      	ldr	r2, [pc, #280]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80051fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005200:	f7fb fe5e 	bl	8000ec0 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005206:	e008      	b.n	800521a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005208:	f7fb fe5a 	bl	8000ec0 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e077      	b.n	800530a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800521a:	4b3e      	ldr	r3, [pc, #248]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005226:	4b3b      	ldr	r3, [pc, #236]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 8005228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6811      	ldr	r1, [r2, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6852      	ldr	r2, [r2, #4]
 800523a:	3a01      	subs	r2, #1
 800523c:	0212      	lsls	r2, r2, #8
 800523e:	430a      	orrs	r2, r1
 8005240:	4934      	ldr	r1, [pc, #208]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 8005242:	4313      	orrs	r3, r2
 8005244:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005246:	4b33      	ldr	r3, [pc, #204]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 8005248:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800524a:	4b33      	ldr	r3, [pc, #204]	@ (8005318 <RCCEx_PLL2_Config+0x12c>)
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6892      	ldr	r2, [r2, #8]
 8005252:	3a01      	subs	r2, #1
 8005254:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68d2      	ldr	r2, [r2, #12]
 800525c:	3a01      	subs	r2, #1
 800525e:	0252      	lsls	r2, r2, #9
 8005260:	b292      	uxth	r2, r2
 8005262:	4311      	orrs	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6912      	ldr	r2, [r2, #16]
 8005268:	3a01      	subs	r2, #1
 800526a:	0412      	lsls	r2, r2, #16
 800526c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005270:	4311      	orrs	r1, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6952      	ldr	r2, [r2, #20]
 8005276:	3a01      	subs	r2, #1
 8005278:	0612      	lsls	r2, r2, #24
 800527a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800527e:	430a      	orrs	r2, r1
 8005280:	4924      	ldr	r1, [pc, #144]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 8005282:	4313      	orrs	r3, r2
 8005284:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005286:	4b23      	ldr	r3, [pc, #140]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	f023 020c 	bic.w	r2, r3, #12
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	4920      	ldr	r1, [pc, #128]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 8005294:	4313      	orrs	r3, r2
 8005296:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005298:	4b1e      	ldr	r3, [pc, #120]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 800529a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	491c      	ldr	r1, [pc, #112]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80052a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052ac:	f023 0310 	bic.w	r3, r3, #16
 80052b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80052b2:	4b18      	ldr	r3, [pc, #96]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	69d2      	ldr	r2, [r2, #28]
 80052c2:	00d2      	lsls	r2, r2, #3
 80052c4:	4913      	ldr	r1, [pc, #76]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80052ca:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	4a11      	ldr	r2, [pc, #68]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052d0:	f043 0310 	orr.w	r3, r3, #16
 80052d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80052d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a0e      	ldr	r2, [pc, #56]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052e2:	f7fb fded 	bl	8000ec0 <HAL_GetTick>
 80052e6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052e8:	e008      	b.n	80052fc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052ea:	f7fb fde9 	bl	8000ec0 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e006      	b.n	800530a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052fc:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <RCCEx_PLL2_Config+0x128>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0

}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	46020c00 	.word	0x46020c00
 8005318:	80800000 	.word	0x80800000

0800531c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005324:	4b47      	ldr	r3, [pc, #284]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a46      	ldr	r2, [pc, #280]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 800532a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800532e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005330:	f7fb fdc6 	bl	8000ec0 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005336:	e008      	b.n	800534a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005338:	f7fb fdc2 	bl	8000ec0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e077      	b.n	800543a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800534a:	4b3e      	ldr	r3, [pc, #248]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005356:	4b3b      	ldr	r3, [pc, #236]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6811      	ldr	r1, [r2, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6852      	ldr	r2, [r2, #4]
 800536a:	3a01      	subs	r2, #1
 800536c:	0212      	lsls	r2, r2, #8
 800536e:	430a      	orrs	r2, r1
 8005370:	4934      	ldr	r1, [pc, #208]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 8005372:	4313      	orrs	r3, r2
 8005374:	630b      	str	r3, [r1, #48]	@ 0x30
 8005376:	4b33      	ldr	r3, [pc, #204]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 8005378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800537a:	4b33      	ldr	r3, [pc, #204]	@ (8005448 <RCCEx_PLL3_Config+0x12c>)
 800537c:	4013      	ands	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6892      	ldr	r2, [r2, #8]
 8005382:	3a01      	subs	r2, #1
 8005384:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	68d2      	ldr	r2, [r2, #12]
 800538c:	3a01      	subs	r2, #1
 800538e:	0252      	lsls	r2, r2, #9
 8005390:	b292      	uxth	r2, r2
 8005392:	4311      	orrs	r1, r2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6912      	ldr	r2, [r2, #16]
 8005398:	3a01      	subs	r2, #1
 800539a:	0412      	lsls	r2, r2, #16
 800539c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80053a0:	4311      	orrs	r1, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6952      	ldr	r2, [r2, #20]
 80053a6:	3a01      	subs	r2, #1
 80053a8:	0612      	lsls	r2, r2, #24
 80053aa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80053ae:	430a      	orrs	r2, r1
 80053b0:	4924      	ldr	r1, [pc, #144]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80053b6:	4b23      	ldr	r3, [pc, #140]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ba:	f023 020c 	bic.w	r2, r3, #12
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	4920      	ldr	r1, [pc, #128]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80053c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	491c      	ldr	r1, [pc, #112]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80053d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	4a1a      	ldr	r2, [pc, #104]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80053e2:	4b18      	ldr	r3, [pc, #96]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	69d2      	ldr	r2, [r2, #28]
 80053f2:	00d2      	lsls	r2, r2, #3
 80053f4:	4913      	ldr	r1, [pc, #76]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80053fa:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	4a11      	ldr	r2, [pc, #68]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 8005400:	f043 0310 	orr.w	r3, r3, #16
 8005404:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005406:	4b0f      	ldr	r3, [pc, #60]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a0e      	ldr	r2, [pc, #56]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005410:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005412:	f7fb fd55 	bl	8000ec0 <HAL_GetTick>
 8005416:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005418:	e008      	b.n	800542c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800541a:	f7fb fd51 	bl	8000ec0 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e006      	b.n	800543a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <RCCEx_PLL3_Config+0x128>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	46020c00 	.word	0x46020c00
 8005448:	80800000 	.word	0x80800000

0800544c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d078      	beq.n	8005550 <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fb fa82 	bl	800097c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005480:	4b36      	ldr	r3, [pc, #216]	@ (800555c <HAL_RTC_Init+0x110>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b10      	cmp	r3, #16
 800548a:	d058      	beq.n	800553e <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 800548c:	4b33      	ldr	r3, [pc, #204]	@ (800555c <HAL_RTC_Init+0x110>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005498:	d053      	beq.n	8005542 <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800549a:	4b30      	ldr	r3, [pc, #192]	@ (800555c <HAL_RTC_Init+0x110>)
 800549c:	22ca      	movs	r2, #202	@ 0xca
 800549e:	625a      	str	r2, [r3, #36]	@ 0x24
 80054a0:	4b2e      	ldr	r3, [pc, #184]	@ (800555c <HAL_RTC_Init+0x110>)
 80054a2:	2253      	movs	r2, #83	@ 0x53
 80054a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa6e 	bl	8005988 <RTC_EnterInitMode>
 80054ac:	4603      	mov	r3, r0
 80054ae:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d13f      	bne.n	8005536 <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80054b6:	4b29      	ldr	r3, [pc, #164]	@ (800555c <HAL_RTC_Init+0x110>)
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	4a28      	ldr	r2, [pc, #160]	@ (800555c <HAL_RTC_Init+0x110>)
 80054bc:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80054c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054c4:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80054c6:	4b25      	ldr	r3, [pc, #148]	@ (800555c <HAL_RTC_Init+0x110>)
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6859      	ldr	r1, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	4319      	orrs	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	430b      	orrs	r3, r1
 80054da:	4920      	ldr	r1, [pc, #128]	@ (800555c <HAL_RTC_Init+0x110>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	491c      	ldr	r1, [pc, #112]	@ (800555c <HAL_RTC_Init+0x110>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80054f0:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <HAL_RTC_Init+0x110>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	430b      	orrs	r3, r1
 8005502:	4916      	ldr	r1, [pc, #88]	@ (800555c <HAL_RTC_Init+0x110>)
 8005504:	4313      	orrs	r3, r2
 8005506:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa79 	bl	8005a00 <RTC_ExitInitMode>
 800550e:	4603      	mov	r3, r0
 8005510:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10e      	bne.n	8005536 <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 8005518:	4b10      	ldr	r3, [pc, #64]	@ (800555c <HAL_RTC_Init+0x110>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a19      	ldr	r1, [r3, #32]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	4319      	orrs	r1, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	430b      	orrs	r3, r1
 8005530:	490a      	ldr	r1, [pc, #40]	@ (800555c <HAL_RTC_Init+0x110>)
 8005532:	4313      	orrs	r3, r2
 8005534:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005536:	4b09      	ldr	r3, [pc, #36]	@ (800555c <HAL_RTC_Init+0x110>)
 8005538:	22ff      	movs	r2, #255	@ 0xff
 800553a:	625a      	str	r2, [r3, #36]	@ 0x24
 800553c:	e001      	b.n	8005542 <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d103      	bne.n	8005550 <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	46007800 	.word	0x46007800

08005560 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_RTC_SetTime+0x1a>
 8005576:	2302      	movs	r3, #2
 8005578:	e088      	b.n	800568c <HAL_RTC_SetTime+0x12c>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2202      	movs	r2, #2
 8005586:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800558a:	4b42      	ldr	r3, [pc, #264]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 800558c:	22ca      	movs	r2, #202	@ 0xca
 800558e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005590:	4b40      	ldr	r3, [pc, #256]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 8005592:	2253      	movs	r2, #83	@ 0x53
 8005594:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f9f6 	bl	8005988 <RTC_EnterInitMode>
 800559c:	4603      	mov	r3, r0
 800559e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80055a0:	7cfb      	ldrb	r3, [r7, #19]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d163      	bne.n	800566e <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80055a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b2:	d057      	beq.n	8005664 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d125      	bne.n	8005606 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80055ba:	4b36      	ldr	r3, [pc, #216]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2200      	movs	r2, #0
 80055ca:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fa53 	bl	8005a7c <RTC_ByteToBcd2>
 80055d6:	4603      	mov	r3, r0
 80055d8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fa4c 	bl	8005a7c <RTC_ByteToBcd2>
 80055e4:	4603      	mov	r3, r0
 80055e6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055e8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	789b      	ldrb	r3, [r3, #2]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fa44 	bl	8005a7c <RTC_ByteToBcd2>
 80055f4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055f6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	78db      	ldrb	r3, [r3, #3]
 80055fe:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e017      	b.n	8005636 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005606:	4b23      	ldr	r3, [pc, #140]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2200      	movs	r2, #0
 8005616:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005624:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800562a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	78db      	ldrb	r3, [r3, #3]
 8005630:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005636:	4a17      	ldr	r2, [pc, #92]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800563e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005642:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005644:	4b13      	ldr	r3, [pc, #76]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	4a12      	ldr	r2, [pc, #72]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 800564a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800564e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005650:	4b10      	ldr	r3, [pc, #64]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	68d9      	ldr	r1, [r3, #12]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	430b      	orrs	r3, r1
 800565e:	490d      	ldr	r1, [pc, #52]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 8005660:	4313      	orrs	r3, r2
 8005662:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f9cb 	bl	8005a00 <RTC_ExitInitMode>
 800566a:	4603      	mov	r3, r0
 800566c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800566e:	4b09      	ldr	r3, [pc, #36]	@ (8005694 <HAL_RTC_SetTime+0x134>)
 8005670:	22ff      	movs	r2, #255	@ 0xff
 8005672:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800568a:	7cfb      	ldrb	r3, [r7, #19]
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	bd90      	pop	{r4, r7, pc}
 8005694:	46007800 	.word	0x46007800

08005698 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80056a4:	4b34      	ldr	r3, [pc, #208]	@ (8005778 <HAL_RTC_GetTime+0xe0>)
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80056ac:	4b32      	ldr	r3, [pc, #200]	@ (8005778 <HAL_RTC_GetTime+0xe0>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b8:	d04a      	beq.n	8005750 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80056ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005778 <HAL_RTC_GetTime+0xe0>)
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80056c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005778 <HAL_RTC_GetTime+0xe0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80056ce:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	0c1b      	lsrs	r3, r3, #16
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	0d9b      	lsrs	r3, r3, #22
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d12a      	bne.n	800576e <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f000 f9cd 	bl	8005abc <RTC_Bcd2ToByte>
 8005722:	4603      	mov	r3, r0
 8005724:	461a      	mov	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	785b      	ldrb	r3, [r3, #1]
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f9c4 	bl	8005abc <RTC_Bcd2ToByte>
 8005734:	4603      	mov	r3, r0
 8005736:	461a      	mov	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	789b      	ldrb	r3, [r3, #2]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 f9bb 	bl	8005abc <RTC_Bcd2ToByte>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	709a      	strb	r2, [r3, #2]
 800574e:	e00e      	b.n	800576e <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2200      	movs	r2, #0
 800575a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2200      	movs	r2, #0
 8005760:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2200      	movs	r2, #0
 8005766:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	46007800 	.word	0x46007800

0800577c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_RTC_SetDate+0x1a>
 8005792:	2302      	movs	r3, #2
 8005794:	e071      	b.n	800587a <HAL_RTC_SetDate+0xfe>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10e      	bne.n	80057ca <HAL_RTC_SetDate+0x4e>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	f023 0310 	bic.w	r3, r3, #16
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	330a      	adds	r3, #10
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d11c      	bne.n	800580a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	78db      	ldrb	r3, [r3, #3]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f951 	bl	8005a7c <RTC_ByteToBcd2>
 80057da:	4603      	mov	r3, r0
 80057dc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f94a 	bl	8005a7c <RTC_ByteToBcd2>
 80057e8:	4603      	mov	r3, r0
 80057ea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80057ec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	789b      	ldrb	r3, [r3, #2]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f942 	bl	8005a7c <RTC_ByteToBcd2>
 80057f8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057fa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e00e      	b.n	8005828 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	78db      	ldrb	r3, [r3, #3]
 800580e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005816:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800581c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005828:	4b16      	ldr	r3, [pc, #88]	@ (8005884 <HAL_RTC_SetDate+0x108>)
 800582a:	22ca      	movs	r2, #202	@ 0xca
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24
 800582e:	4b15      	ldr	r3, [pc, #84]	@ (8005884 <HAL_RTC_SetDate+0x108>)
 8005830:	2253      	movs	r2, #83	@ 0x53
 8005832:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f8a7 	bl	8005988 <RTC_EnterInitMode>
 800583a:	4603      	mov	r3, r0
 800583c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800583e:	7cfb      	ldrb	r3, [r7, #19]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10b      	bne.n	800585c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005844:	4a0f      	ldr	r2, [pc, #60]	@ (8005884 <HAL_RTC_SetDate+0x108>)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800584c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005850:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f8d4 	bl	8005a00 <RTC_ExitInitMode>
 8005858:	4603      	mov	r3, r0
 800585a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800585c:	4b09      	ldr	r3, [pc, #36]	@ (8005884 <HAL_RTC_SetDate+0x108>)
 800585e:	22ff      	movs	r2, #255	@ 0xff
 8005860:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005862:	7cfb      	ldrb	r3, [r7, #19]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d103      	bne.n	8005870 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8005878:	7cfb      	ldrb	r3, [r7, #19]
}
 800587a:	4618      	mov	r0, r3
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	bd90      	pop	{r4, r7, pc}
 8005882:	bf00      	nop
 8005884:	46007800 	.word	0x46007800

08005888 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8005894:	4b22      	ldr	r3, [pc, #136]	@ (8005920 <HAL_RTC_GetDate+0x98>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800589c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80058a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	0b5b      	lsrs	r3, r3, #13
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d11a      	bne.n	8005916 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	78db      	ldrb	r3, [r3, #3]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f8e9 	bl	8005abc <RTC_Bcd2ToByte>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461a      	mov	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 f8e0 	bl	8005abc <RTC_Bcd2ToByte>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	789b      	ldrb	r3, [r3, #2]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 f8d7 	bl	8005abc <RTC_Bcd2ToByte>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	46007800 	.word	0x46007800

08005924 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800592c:	4b15      	ldr	r3, [pc, #84]	@ (8005984 <HAL_RTC_WaitForSynchro+0x60>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4a14      	ldr	r2, [pc, #80]	@ (8005984 <HAL_RTC_WaitForSynchro+0x60>)
 8005932:	f023 0320 	bic.w	r3, r3, #32
 8005936:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005938:	f7fb fac2 	bl	8000ec0 <HAL_GetTick>
 800593c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800593e:	e013      	b.n	8005968 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005940:	f7fb fabe 	bl	8000ec0 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800594e:	d90b      	bls.n	8005968 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005950:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <HAL_RTC_WaitForSynchro+0x60>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10c      	bne.n	8005976 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2203      	movs	r2, #3
 8005960:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e008      	b.n	800597a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005968:	4b06      	ldr	r3, [pc, #24]	@ (8005984 <HAL_RTC_WaitForSynchro+0x60>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0e5      	beq.n	8005940 <HAL_RTC_WaitForSynchro+0x1c>
 8005974:	e000      	b.n	8005978 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8005976:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	46007800 	.word	0x46007800

08005988 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005994:	4b19      	ldr	r3, [pc, #100]	@ (80059fc <RTC_EnterInitMode+0x74>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d128      	bne.n	80059f2 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80059a0:	4b16      	ldr	r3, [pc, #88]	@ (80059fc <RTC_EnterInitMode+0x74>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4a15      	ldr	r2, [pc, #84]	@ (80059fc <RTC_EnterInitMode+0x74>)
 80059a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059aa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80059ac:	f7fb fa88 	bl	8000ec0 <HAL_GetTick>
 80059b0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80059b2:	e013      	b.n	80059dc <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80059b4:	f7fb fa84 	bl	8000ec0 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059c2:	d90b      	bls.n	80059dc <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80059c4:	4b0d      	ldr	r3, [pc, #52]	@ (80059fc <RTC_EnterInitMode+0x74>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10f      	bne.n	80059f0 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2203      	movs	r2, #3
 80059d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80059dc:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <RTC_EnterInitMode+0x74>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <RTC_EnterInitMode+0x6a>
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d1e2      	bne.n	80059b4 <RTC_EnterInitMode+0x2c>
 80059ee:	e000      	b.n	80059f2 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80059f0:	bf00      	nop
        }
      }
    }
  }

  return status;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	46007800 	.word	0x46007800

08005a00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <RTC_ExitInitMode+0x78>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4a19      	ldr	r2, [pc, #100]	@ (8005a78 <RTC_ExitInitMode+0x78>)
 8005a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a16:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005a18:	4b17      	ldr	r3, [pc, #92]	@ (8005a78 <RTC_ExitInitMode+0x78>)
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10c      	bne.n	8005a3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff ff7d 	bl	8005924 <HAL_RTC_WaitForSynchro>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01e      	beq.n	8005a6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2203      	movs	r2, #3
 8005a34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	73fb      	strb	r3, [r7, #15]
 8005a3c:	e017      	b.n	8005a6e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a78 <RTC_ExitInitMode+0x78>)
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	4a0d      	ldr	r2, [pc, #52]	@ (8005a78 <RTC_ExitInitMode+0x78>)
 8005a44:	f023 0320 	bic.w	r3, r3, #32
 8005a48:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff ff6a 	bl	8005924 <HAL_RTC_WaitForSynchro>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2203      	movs	r2, #3
 8005a5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a62:	4b05      	ldr	r3, [pc, #20]	@ (8005a78 <RTC_ExitInitMode+0x78>)
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	4a04      	ldr	r2, [pc, #16]	@ (8005a78 <RTC_ExitInitMode+0x78>)
 8005a68:	f043 0320 	orr.w	r3, r3, #32
 8005a6c:	6193      	str	r3, [r2, #24]
  }
  return status;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	46007800 	.word	0x46007800

08005a7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005a8e:	e005      	b.n	8005a9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005a96:	7afb      	ldrb	r3, [r7, #11]
 8005a98:	3b0a      	subs	r3, #10
 8005a9a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005a9c:	7afb      	ldrb	r3, [r7, #11]
 8005a9e:	2b09      	cmp	r3, #9
 8005aa0:	d8f6      	bhi.n	8005a90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	7afb      	ldrb	r3, [r7, #11]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	b2db      	uxtb	r3, r3
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	091b      	lsrs	r3, r3, #4
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	b2db      	uxtb	r3, r3
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4910      	ldr	r1, [pc, #64]	@ (8005b48 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	490c      	ldr	r1, [pc, #48]	@ (8005b4c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8005b20:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6919      	ldr	r1, [r3, #16]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	041b      	lsls	r3, r3, #16
 8005b32:	430b      	orrs	r3, r1
 8005b34:	4905      	ldr	r1, [pc, #20]	@ (8005b4c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	46007800 	.word	0x46007800
 8005b4c:	46007c00 	.word	0x46007c00

08005b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e042      	b.n	8005be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fa ff4d 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2224      	movs	r2, #36	@ 0x24
 8005b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fa4e 	bl	800603c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f8b3 	bl	8005d0c <UART_SetConfig>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e01b      	b.n	8005be8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 facd 	bl	8006180 <UART_CheckIdleState>
 8005be6:	4603      	mov	r3, r0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	@ 0x28
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d17b      	bne.n	8005d02 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_UART_Transmit+0x26>
 8005c10:	88fb      	ldrh	r3, [r7, #6]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e074      	b.n	8005d04 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2221      	movs	r2, #33	@ 0x21
 8005c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2a:	f7fb f949 	bl	8000ec0 <HAL_GetTick>
 8005c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c48:	d108      	bne.n	8005c5c <HAL_UART_Transmit+0x6c>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e003      	b.n	8005c64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c64:	e030      	b.n	8005cc8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2180      	movs	r1, #128	@ 0x80
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fb2f 	bl	80062d4 <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e03d      	b.n	8005d04 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	e007      	b.n	8005cb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	781a      	ldrb	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1c8      	bne.n	8005c66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2140      	movs	r1, #64	@ 0x40
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 faf8 	bl	80062d4 <UART_WaitOnFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e006      	b.n	8005d04 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e000      	b.n	8005d04 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d02:	2302      	movs	r3, #2
  }
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3720      	adds	r7, #32
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d10:	b094      	sub	sp, #80	@ 0x50
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	4b9b      	ldr	r3, [pc, #620]	@ (8005f90 <UART_SetConfig+0x284>)
 8005d22:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4994      	ldr	r1, [pc, #592]	@ (8005f94 <UART_SetConfig+0x288>)
 8005d44:	4019      	ands	r1, r3
 8005d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5c:	68d9      	ldr	r1, [r3, #12]
 8005d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	ea40 0301 	orr.w	r3, r0, r1
 8005d66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b87      	ldr	r3, [pc, #540]	@ (8005f90 <UART_SetConfig+0x284>)
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d009      	beq.n	8005d8c <UART_SetConfig+0x80>
 8005d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	4b86      	ldr	r3, [pc, #536]	@ (8005f98 <UART_SetConfig+0x28c>)
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d004      	beq.n	8005d8c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005d96:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	f023 000f 	bic.w	r0, r3, #15
 8005dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	ea40 0301 	orr.w	r3, r0, r1
 8005dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4b76      	ldr	r3, [pc, #472]	@ (8005f9c <UART_SetConfig+0x290>)
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d102      	bne.n	8005dcc <UART_SetConfig+0xc0>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dca:	e021      	b.n	8005e10 <UART_SetConfig+0x104>
 8005dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b73      	ldr	r3, [pc, #460]	@ (8005fa0 <UART_SetConfig+0x294>)
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d102      	bne.n	8005ddc <UART_SetConfig+0xd0>
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dda:	e019      	b.n	8005e10 <UART_SetConfig+0x104>
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4b70      	ldr	r3, [pc, #448]	@ (8005fa4 <UART_SetConfig+0x298>)
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d102      	bne.n	8005dec <UART_SetConfig+0xe0>
 8005de6:	2308      	movs	r3, #8
 8005de8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dea:	e011      	b.n	8005e10 <UART_SetConfig+0x104>
 8005dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa8 <UART_SetConfig+0x29c>)
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d102      	bne.n	8005dfc <UART_SetConfig+0xf0>
 8005df6:	2310      	movs	r3, #16
 8005df8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dfa:	e009      	b.n	8005e10 <UART_SetConfig+0x104>
 8005dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b63      	ldr	r3, [pc, #396]	@ (8005f90 <UART_SetConfig+0x284>)
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d102      	bne.n	8005e0c <UART_SetConfig+0x100>
 8005e06:	2320      	movs	r3, #32
 8005e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0a:	e001      	b.n	8005e10 <UART_SetConfig+0x104>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4b5e      	ldr	r3, [pc, #376]	@ (8005f90 <UART_SetConfig+0x284>)
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d004      	beq.n	8005e24 <UART_SetConfig+0x118>
 8005e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b5e      	ldr	r3, [pc, #376]	@ (8005f98 <UART_SetConfig+0x28c>)
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d172      	bne.n	8005f0a <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e26:	2200      	movs	r2, #0
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e30:	f7fe f89a 	bl	8003f68 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e34:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80e7 	beq.w	800600c <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	4a5a      	ldr	r2, [pc, #360]	@ (8005fac <UART_SetConfig+0x2a0>)
 8005e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e50:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d305      	bcc.n	8005e6e <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d903      	bls.n	8005e76 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005e74:	e048      	b.n	8005f08 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e78:	2200      	movs	r2, #0
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	61fa      	str	r2, [r7, #28]
 8005e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	4a4a      	ldr	r2, [pc, #296]	@ (8005fac <UART_SetConfig+0x2a0>)
 8005e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	617a      	str	r2, [r7, #20]
 8005e90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005e98:	f7fa f9ee 	bl	8000278 <__aeabi_uldivmod>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	020b      	lsls	r3, r1, #8
 8005eae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005eb2:	0202      	lsls	r2, r0, #8
 8005eb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eb6:	6849      	ldr	r1, [r1, #4]
 8005eb8:	0849      	lsrs	r1, r1, #1
 8005eba:	2000      	movs	r0, #0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	eb12 0804 	adds.w	r8, r2, r4
 8005ec4:	eb43 0905 	adc.w	r9, r3, r5
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	60fa      	str	r2, [r7, #12]
 8005ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	4649      	mov	r1, r9
 8005eda:	f7fa f9cd 	bl	8000278 <__aeabi_uldivmod>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eec:	d308      	bcc.n	8005f00 <UART_SetConfig+0x1f4>
 8005eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ef4:	d204      	bcs.n	8005f00 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8005ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005efc:	60da      	str	r2, [r3, #12]
 8005efe:	e003      	b.n	8005f08 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8005f06:	e081      	b.n	800600c <UART_SetConfig+0x300>
 8005f08:	e080      	b.n	800600c <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f12:	d14d      	bne.n	8005fb0 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f16:	2200      	movs	r2, #0
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f20:	f7fe f822 	bl	8003f68 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f24:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d06f      	beq.n	800600c <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	4a1e      	ldr	r2, [pc, #120]	@ (8005fac <UART_SetConfig+0x2a0>)
 8005f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f36:	461a      	mov	r2, r3
 8005f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f3e:	005a      	lsls	r2, r3, #1
 8005f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	441a      	add	r2, r3
 8005f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f54:	2b0f      	cmp	r3, #15
 8005f56:	d916      	bls.n	8005f86 <UART_SetConfig+0x27a>
 8005f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f5e:	d212      	bcs.n	8005f86 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f023 030f 	bic.w	r3, r3, #15
 8005f68:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005f82:	60da      	str	r2, [r3, #12]
 8005f84:	e042      	b.n	800600c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f8c:	e03e      	b.n	800600c <UART_SetConfig+0x300>
 8005f8e:	bf00      	nop
 8005f90:	46002400 	.word	0x46002400
 8005f94:	cfff69f3 	.word	0xcfff69f3
 8005f98:	56002400 	.word	0x56002400
 8005f9c:	40013800 	.word	0x40013800
 8005fa0:	40004800 	.word	0x40004800
 8005fa4:	40004c00 	.word	0x40004c00
 8005fa8:	40005000 	.word	0x40005000
 8005fac:	08007644 	.word	0x08007644
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	469a      	mov	sl, r3
 8005fb6:	4693      	mov	fp, r2
 8005fb8:	4650      	mov	r0, sl
 8005fba:	4659      	mov	r1, fp
 8005fbc:	f7fd ffd4 	bl	8003f68 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fc0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d021      	beq.n	800600c <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8006038 <UART_SetConfig+0x32c>)
 8005fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	441a      	add	r2, r3
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fee:	2b0f      	cmp	r3, #15
 8005ff0:	d909      	bls.n	8006006 <UART_SetConfig+0x2fa>
 8005ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff8:	d205      	bcs.n	8006006 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60da      	str	r2, [r3, #12]
 8006004:	e002      	b.n	800600c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600e:	2201      	movs	r2, #1
 8006010:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006016:	2201      	movs	r2, #1
 8006018:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601e:	2200      	movs	r2, #0
 8006020:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006024:	2200      	movs	r2, #0
 8006026:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006028:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800602c:	4618      	mov	r0, r3
 800602e:	3750      	adds	r7, #80	@ 0x50
 8006030:	46bd      	mov	sp, r7
 8006032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006036:	bf00      	nop
 8006038:	08007644 	.word	0x08007644

0800603c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01a      	beq.n	8006152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800613a:	d10a      	bne.n	8006152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	605a      	str	r2, [r3, #4]
  }
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b098      	sub	sp, #96	@ 0x60
 8006184:	af02      	add	r7, sp, #8
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006190:	f7fa fe96 	bl	8000ec0 <HAL_GetTick>
 8006194:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d12f      	bne.n	8006204 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ac:	2200      	movs	r2, #0
 80061ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f88e 	bl	80062d4 <UART_WaitOnFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d022      	beq.n	8006204 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80061de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e6      	bne.n	80061be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e063      	b.n	80062cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b04      	cmp	r3, #4
 8006210:	d149      	bne.n	80062a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006212:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800621a:	2200      	movs	r2, #0
 800621c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f857 	bl	80062d4 <UART_WaitOnFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d03c      	beq.n	80062a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	623b      	str	r3, [r7, #32]
   return(result);
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800624a:	633b      	str	r3, [r7, #48]	@ 0x30
 800624c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e6      	bne.n	800622c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	60fb      	str	r3, [r7, #12]
   return(result);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800627e:	61fa      	str	r2, [r7, #28]
 8006280:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	69b9      	ldr	r1, [r7, #24]
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	617b      	str	r3, [r7, #20]
   return(result);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e012      	b.n	80062cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3758      	adds	r7, #88	@ 0x58
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e4:	e04f      	b.n	8006386 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d04b      	beq.n	8006386 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ee:	f7fa fde7 	bl	8000ec0 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d302      	bcc.n	8006304 <UART_WaitOnFlagUntilTimeout+0x30>
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e04e      	b.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d037      	beq.n	8006386 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b80      	cmp	r3, #128	@ 0x80
 800631a:	d034      	beq.n	8006386 <UART_WaitOnFlagUntilTimeout+0xb2>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b40      	cmp	r3, #64	@ 0x40
 8006320:	d031      	beq.n	8006386 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b08      	cmp	r3, #8
 800632e:	d110      	bne.n	8006352 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2208      	movs	r2, #8
 8006336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f838 	bl	80063ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2208      	movs	r2, #8
 8006342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e029      	b.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800635c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006360:	d111      	bne.n	8006386 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800636a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f81e 	bl	80063ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e00f      	b.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	429a      	cmp	r2, r3
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d0a0      	beq.n	80062e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b095      	sub	sp, #84	@ 0x54
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80063d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e6      	bne.n	80063b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3308      	adds	r3, #8
 80063ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800640c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800640e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e3      	bne.n	80063e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d118      	bne.n	800645a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	60bb      	str	r3, [r7, #8]
   return(result);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 0310 	bic.w	r3, r3, #16
 800643c:	647b      	str	r3, [r7, #68]	@ 0x44
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6979      	ldr	r1, [r7, #20]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	613b      	str	r3, [r7, #16]
   return(result);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e6      	bne.n	8006428 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800646e:	bf00      	nop
 8006470:	3754      	adds	r7, #84	@ 0x54
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_UARTEx_DisableFifoMode+0x16>
 800648c:	2302      	movs	r3, #2
 800648e:	e027      	b.n	80064e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2224      	movs	r2, #36	@ 0x24
 800649c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006500:	2302      	movs	r3, #2
 8006502:	e02d      	b.n	8006560 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2224      	movs	r2, #36	@ 0x24
 8006510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f84f 	bl	80065e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800657c:	2302      	movs	r3, #2
 800657e:	e02d      	b.n	80065dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2224      	movs	r2, #36	@ 0x24
 800658c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f811 	bl	80065e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d108      	bne.n	8006606 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006604:	e031      	b.n	800666a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006606:	2308      	movs	r3, #8
 8006608:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800660a:	2308      	movs	r3, #8
 800660c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	0e5b      	lsrs	r3, r3, #25
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	0f5b      	lsrs	r3, r3, #29
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	7b3a      	ldrb	r2, [r7, #12]
 8006632:	4911      	ldr	r1, [pc, #68]	@ (8006678 <UARTEx_SetNbDataToProcess+0x94>)
 8006634:	5c8a      	ldrb	r2, [r1, r2]
 8006636:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800663a:	7b3a      	ldrb	r2, [r7, #12]
 800663c:	490f      	ldr	r1, [pc, #60]	@ (800667c <UARTEx_SetNbDataToProcess+0x98>)
 800663e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006640:	fb93 f3f2 	sdiv	r3, r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	7b7a      	ldrb	r2, [r7, #13]
 8006650:	4909      	ldr	r1, [pc, #36]	@ (8006678 <UARTEx_SetNbDataToProcess+0x94>)
 8006652:	5c8a      	ldrb	r2, [r1, r2]
 8006654:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006658:	7b7a      	ldrb	r2, [r7, #13]
 800665a:	4908      	ldr	r1, [pc, #32]	@ (800667c <UARTEx_SetNbDataToProcess+0x98>)
 800665c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800665e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	0800765c 	.word	0x0800765c
 800667c:	08007664 	.word	0x08007664

08006680 <std>:
 8006680:	2300      	movs	r3, #0
 8006682:	b510      	push	{r4, lr}
 8006684:	4604      	mov	r4, r0
 8006686:	6083      	str	r3, [r0, #8]
 8006688:	8181      	strh	r1, [r0, #12]
 800668a:	4619      	mov	r1, r3
 800668c:	6643      	str	r3, [r0, #100]	@ 0x64
 800668e:	81c2      	strh	r2, [r0, #14]
 8006690:	2208      	movs	r2, #8
 8006692:	6183      	str	r3, [r0, #24]
 8006694:	e9c0 3300 	strd	r3, r3, [r0]
 8006698:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800669c:	305c      	adds	r0, #92	@ 0x5c
 800669e:	f000 f906 	bl	80068ae <memset>
 80066a2:	4b0d      	ldr	r3, [pc, #52]	@ (80066d8 <std+0x58>)
 80066a4:	6224      	str	r4, [r4, #32]
 80066a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80066a8:	4b0c      	ldr	r3, [pc, #48]	@ (80066dc <std+0x5c>)
 80066aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066ac:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <std+0x60>)
 80066ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066b0:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <std+0x64>)
 80066b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80066b4:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <std+0x68>)
 80066b6:	429c      	cmp	r4, r3
 80066b8:	d006      	beq.n	80066c8 <std+0x48>
 80066ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066be:	4294      	cmp	r4, r2
 80066c0:	d002      	beq.n	80066c8 <std+0x48>
 80066c2:	33d0      	adds	r3, #208	@ 0xd0
 80066c4:	429c      	cmp	r4, r3
 80066c6:	d105      	bne.n	80066d4 <std+0x54>
 80066c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f000 b966 	b.w	80069a0 <__retarget_lock_init_recursive>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	bf00      	nop
 80066d8:	08006829 	.word	0x08006829
 80066dc:	0800684b 	.word	0x0800684b
 80066e0:	08006883 	.word	0x08006883
 80066e4:	080068a7 	.word	0x080068a7
 80066e8:	20000150 	.word	0x20000150

080066ec <stdio_exit_handler>:
 80066ec:	4a02      	ldr	r2, [pc, #8]	@ (80066f8 <stdio_exit_handler+0xc>)
 80066ee:	4903      	ldr	r1, [pc, #12]	@ (80066fc <stdio_exit_handler+0x10>)
 80066f0:	4803      	ldr	r0, [pc, #12]	@ (8006700 <stdio_exit_handler+0x14>)
 80066f2:	f000 b869 	b.w	80067c8 <_fwalk_sglue>
 80066f6:	bf00      	nop
 80066f8:	2000000c 	.word	0x2000000c
 80066fc:	08007249 	.word	0x08007249
 8006700:	2000001c 	.word	0x2000001c

08006704 <cleanup_stdio>:
 8006704:	6841      	ldr	r1, [r0, #4]
 8006706:	4b0c      	ldr	r3, [pc, #48]	@ (8006738 <cleanup_stdio+0x34>)
 8006708:	4299      	cmp	r1, r3
 800670a:	b510      	push	{r4, lr}
 800670c:	4604      	mov	r4, r0
 800670e:	d001      	beq.n	8006714 <cleanup_stdio+0x10>
 8006710:	f000 fd9a 	bl	8007248 <_fflush_r>
 8006714:	68a1      	ldr	r1, [r4, #8]
 8006716:	4b09      	ldr	r3, [pc, #36]	@ (800673c <cleanup_stdio+0x38>)
 8006718:	4299      	cmp	r1, r3
 800671a:	d002      	beq.n	8006722 <cleanup_stdio+0x1e>
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fd93 	bl	8007248 <_fflush_r>
 8006722:	68e1      	ldr	r1, [r4, #12]
 8006724:	4b06      	ldr	r3, [pc, #24]	@ (8006740 <cleanup_stdio+0x3c>)
 8006726:	4299      	cmp	r1, r3
 8006728:	d004      	beq.n	8006734 <cleanup_stdio+0x30>
 800672a:	4620      	mov	r0, r4
 800672c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006730:	f000 bd8a 	b.w	8007248 <_fflush_r>
 8006734:	bd10      	pop	{r4, pc}
 8006736:	bf00      	nop
 8006738:	20000150 	.word	0x20000150
 800673c:	200001b8 	.word	0x200001b8
 8006740:	20000220 	.word	0x20000220

08006744 <global_stdio_init.part.0>:
 8006744:	b510      	push	{r4, lr}
 8006746:	4b0b      	ldr	r3, [pc, #44]	@ (8006774 <global_stdio_init.part.0+0x30>)
 8006748:	2104      	movs	r1, #4
 800674a:	4c0b      	ldr	r4, [pc, #44]	@ (8006778 <global_stdio_init.part.0+0x34>)
 800674c:	4a0b      	ldr	r2, [pc, #44]	@ (800677c <global_stdio_init.part.0+0x38>)
 800674e:	4620      	mov	r0, r4
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	2200      	movs	r2, #0
 8006754:	f7ff ff94 	bl	8006680 <std>
 8006758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800675c:	2201      	movs	r2, #1
 800675e:	2109      	movs	r1, #9
 8006760:	f7ff ff8e 	bl	8006680 <std>
 8006764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006768:	2202      	movs	r2, #2
 800676a:	2112      	movs	r1, #18
 800676c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006770:	f7ff bf86 	b.w	8006680 <std>
 8006774:	20000288 	.word	0x20000288
 8006778:	20000150 	.word	0x20000150
 800677c:	080066ed 	.word	0x080066ed

08006780 <__sfp_lock_acquire>:
 8006780:	4801      	ldr	r0, [pc, #4]	@ (8006788 <__sfp_lock_acquire+0x8>)
 8006782:	f000 b90e 	b.w	80069a2 <__retarget_lock_acquire_recursive>
 8006786:	bf00      	nop
 8006788:	20000291 	.word	0x20000291

0800678c <__sfp_lock_release>:
 800678c:	4801      	ldr	r0, [pc, #4]	@ (8006794 <__sfp_lock_release+0x8>)
 800678e:	f000 b909 	b.w	80069a4 <__retarget_lock_release_recursive>
 8006792:	bf00      	nop
 8006794:	20000291 	.word	0x20000291

08006798 <__sinit>:
 8006798:	b510      	push	{r4, lr}
 800679a:	4604      	mov	r4, r0
 800679c:	f7ff fff0 	bl	8006780 <__sfp_lock_acquire>
 80067a0:	6a23      	ldr	r3, [r4, #32]
 80067a2:	b11b      	cbz	r3, 80067ac <__sinit+0x14>
 80067a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a8:	f7ff bff0 	b.w	800678c <__sfp_lock_release>
 80067ac:	4b04      	ldr	r3, [pc, #16]	@ (80067c0 <__sinit+0x28>)
 80067ae:	6223      	str	r3, [r4, #32]
 80067b0:	4b04      	ldr	r3, [pc, #16]	@ (80067c4 <__sinit+0x2c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f5      	bne.n	80067a4 <__sinit+0xc>
 80067b8:	f7ff ffc4 	bl	8006744 <global_stdio_init.part.0>
 80067bc:	e7f2      	b.n	80067a4 <__sinit+0xc>
 80067be:	bf00      	nop
 80067c0:	08006705 	.word	0x08006705
 80067c4:	20000288 	.word	0x20000288

080067c8 <_fwalk_sglue>:
 80067c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067cc:	4607      	mov	r7, r0
 80067ce:	4688      	mov	r8, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	2600      	movs	r6, #0
 80067d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067d8:	f1b9 0901 	subs.w	r9, r9, #1
 80067dc:	d505      	bpl.n	80067ea <_fwalk_sglue+0x22>
 80067de:	6824      	ldr	r4, [r4, #0]
 80067e0:	2c00      	cmp	r4, #0
 80067e2:	d1f7      	bne.n	80067d4 <_fwalk_sglue+0xc>
 80067e4:	4630      	mov	r0, r6
 80067e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ea:	89ab      	ldrh	r3, [r5, #12]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d907      	bls.n	8006800 <_fwalk_sglue+0x38>
 80067f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067f4:	3301      	adds	r3, #1
 80067f6:	d003      	beq.n	8006800 <_fwalk_sglue+0x38>
 80067f8:	4629      	mov	r1, r5
 80067fa:	4638      	mov	r0, r7
 80067fc:	47c0      	blx	r8
 80067fe:	4306      	orrs	r6, r0
 8006800:	3568      	adds	r5, #104	@ 0x68
 8006802:	e7e9      	b.n	80067d8 <_fwalk_sglue+0x10>

08006804 <iprintf>:
 8006804:	b40f      	push	{r0, r1, r2, r3}
 8006806:	b507      	push	{r0, r1, r2, lr}
 8006808:	4906      	ldr	r1, [pc, #24]	@ (8006824 <iprintf+0x20>)
 800680a:	ab04      	add	r3, sp, #16
 800680c:	6808      	ldr	r0, [r1, #0]
 800680e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006812:	6881      	ldr	r1, [r0, #8]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	f000 f9e9 	bl	8006bec <_vfiprintf_r>
 800681a:	b003      	add	sp, #12
 800681c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006820:	b004      	add	sp, #16
 8006822:	4770      	bx	lr
 8006824:	20000018 	.word	0x20000018

08006828 <__sread>:
 8006828:	b510      	push	{r4, lr}
 800682a:	460c      	mov	r4, r1
 800682c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006830:	f000 f868 	bl	8006904 <_read_r>
 8006834:	2800      	cmp	r0, #0
 8006836:	bfab      	itete	ge
 8006838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800683a:	89a3      	ldrhlt	r3, [r4, #12]
 800683c:	181b      	addge	r3, r3, r0
 800683e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006842:	bfac      	ite	ge
 8006844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006846:	81a3      	strhlt	r3, [r4, #12]
 8006848:	bd10      	pop	{r4, pc}

0800684a <__swrite>:
 800684a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684e:	461f      	mov	r7, r3
 8006850:	898b      	ldrh	r3, [r1, #12]
 8006852:	4605      	mov	r5, r0
 8006854:	460c      	mov	r4, r1
 8006856:	05db      	lsls	r3, r3, #23
 8006858:	4616      	mov	r6, r2
 800685a:	d505      	bpl.n	8006868 <__swrite+0x1e>
 800685c:	2302      	movs	r3, #2
 800685e:	2200      	movs	r2, #0
 8006860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006864:	f000 f83c 	bl	80068e0 <_lseek_r>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	4632      	mov	r2, r6
 800686c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006870:	4628      	mov	r0, r5
 8006872:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	463b      	mov	r3, r7
 800687a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800687e:	f000 b853 	b.w	8006928 <_write_r>

08006882 <__sseek>:
 8006882:	b510      	push	{r4, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688a:	f000 f829 	bl	80068e0 <_lseek_r>
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	bf15      	itete	ne
 8006894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800689a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800689e:	81a3      	strheq	r3, [r4, #12]
 80068a0:	bf18      	it	ne
 80068a2:	81a3      	strhne	r3, [r4, #12]
 80068a4:	bd10      	pop	{r4, pc}

080068a6 <__sclose>:
 80068a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068aa:	f000 b809 	b.w	80068c0 <_close_r>

080068ae <memset>:
 80068ae:	4402      	add	r2, r0
 80068b0:	4603      	mov	r3, r0
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d100      	bne.n	80068b8 <memset+0xa>
 80068b6:	4770      	bx	lr
 80068b8:	f803 1b01 	strb.w	r1, [r3], #1
 80068bc:	e7f9      	b.n	80068b2 <memset+0x4>
	...

080068c0 <_close_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	2300      	movs	r3, #0
 80068c4:	4d05      	ldr	r5, [pc, #20]	@ (80068dc <_close_r+0x1c>)
 80068c6:	4604      	mov	r4, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	f7fa f972 	bl	8000bb4 <_close>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_close_r+0x1a>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_close_r+0x1a>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	2000028c 	.word	0x2000028c

080068e0 <_lseek_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4604      	mov	r4, r0
 80068e4:	4d06      	ldr	r5, [pc, #24]	@ (8006900 <_lseek_r+0x20>)
 80068e6:	4608      	mov	r0, r1
 80068e8:	4611      	mov	r1, r2
 80068ea:	2200      	movs	r2, #0
 80068ec:	602a      	str	r2, [r5, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f7fa f987 	bl	8000c02 <_lseek>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_lseek_r+0x1e>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_lseek_r+0x1e>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	2000028c 	.word	0x2000028c

08006904 <_read_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4604      	mov	r4, r0
 8006908:	4d06      	ldr	r5, [pc, #24]	@ (8006924 <_read_r+0x20>)
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	2200      	movs	r2, #0
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f7fa f915 	bl	8000b42 <_read>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_read_r+0x1e>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_read_r+0x1e>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	2000028c 	.word	0x2000028c

08006928 <_write_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4604      	mov	r4, r0
 800692c:	4d06      	ldr	r5, [pc, #24]	@ (8006948 <_write_r+0x20>)
 800692e:	4608      	mov	r0, r1
 8006930:	4611      	mov	r1, r2
 8006932:	2200      	movs	r2, #0
 8006934:	602a      	str	r2, [r5, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f7fa f920 	bl	8000b7c <_write>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_write_r+0x1e>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_write_r+0x1e>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	2000028c 	.word	0x2000028c

0800694c <__errno>:
 800694c:	4b01      	ldr	r3, [pc, #4]	@ (8006954 <__errno+0x8>)
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000018 	.word	0x20000018

08006958 <__libc_init_array>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	4d0d      	ldr	r5, [pc, #52]	@ (8006990 <__libc_init_array+0x38>)
 800695c:	2600      	movs	r6, #0
 800695e:	4c0d      	ldr	r4, [pc, #52]	@ (8006994 <__libc_init_array+0x3c>)
 8006960:	1b64      	subs	r4, r4, r5
 8006962:	10a4      	asrs	r4, r4, #2
 8006964:	42a6      	cmp	r6, r4
 8006966:	d109      	bne.n	800697c <__libc_init_array+0x24>
 8006968:	4d0b      	ldr	r5, [pc, #44]	@ (8006998 <__libc_init_array+0x40>)
 800696a:	2600      	movs	r6, #0
 800696c:	4c0b      	ldr	r4, [pc, #44]	@ (800699c <__libc_init_array+0x44>)
 800696e:	f000 fdc9 	bl	8007504 <_init>
 8006972:	1b64      	subs	r4, r4, r5
 8006974:	10a4      	asrs	r4, r4, #2
 8006976:	42a6      	cmp	r6, r4
 8006978:	d105      	bne.n	8006986 <__libc_init_array+0x2e>
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006980:	3601      	adds	r6, #1
 8006982:	4798      	blx	r3
 8006984:	e7ee      	b.n	8006964 <__libc_init_array+0xc>
 8006986:	f855 3b04 	ldr.w	r3, [r5], #4
 800698a:	3601      	adds	r6, #1
 800698c:	4798      	blx	r3
 800698e:	e7f2      	b.n	8006976 <__libc_init_array+0x1e>
 8006990:	080076a8 	.word	0x080076a8
 8006994:	080076a8 	.word	0x080076a8
 8006998:	080076a8 	.word	0x080076a8
 800699c:	080076ac 	.word	0x080076ac

080069a0 <__retarget_lock_init_recursive>:
 80069a0:	4770      	bx	lr

080069a2 <__retarget_lock_acquire_recursive>:
 80069a2:	4770      	bx	lr

080069a4 <__retarget_lock_release_recursive>:
 80069a4:	4770      	bx	lr
	...

080069a8 <_free_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4605      	mov	r5, r0
 80069ac:	2900      	cmp	r1, #0
 80069ae:	d041      	beq.n	8006a34 <_free_r+0x8c>
 80069b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b4:	1f0c      	subs	r4, r1, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfb8      	it	lt
 80069ba:	18e4      	addlt	r4, r4, r3
 80069bc:	f000 f8e0 	bl	8006b80 <__malloc_lock>
 80069c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a38 <_free_r+0x90>)
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	b933      	cbnz	r3, 80069d4 <_free_r+0x2c>
 80069c6:	6063      	str	r3, [r4, #4]
 80069c8:	6014      	str	r4, [r2, #0]
 80069ca:	4628      	mov	r0, r5
 80069cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069d0:	f000 b8dc 	b.w	8006b8c <__malloc_unlock>
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	d908      	bls.n	80069ea <_free_r+0x42>
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	1821      	adds	r1, r4, r0
 80069dc:	428b      	cmp	r3, r1
 80069de:	bf01      	itttt	eq
 80069e0:	6819      	ldreq	r1, [r3, #0]
 80069e2:	685b      	ldreq	r3, [r3, #4]
 80069e4:	1809      	addeq	r1, r1, r0
 80069e6:	6021      	streq	r1, [r4, #0]
 80069e8:	e7ed      	b.n	80069c6 <_free_r+0x1e>
 80069ea:	461a      	mov	r2, r3
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	b10b      	cbz	r3, 80069f4 <_free_r+0x4c>
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	d9fa      	bls.n	80069ea <_free_r+0x42>
 80069f4:	6811      	ldr	r1, [r2, #0]
 80069f6:	1850      	adds	r0, r2, r1
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d10b      	bne.n	8006a14 <_free_r+0x6c>
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	4401      	add	r1, r0
 8006a00:	1850      	adds	r0, r2, r1
 8006a02:	6011      	str	r1, [r2, #0]
 8006a04:	4283      	cmp	r3, r0
 8006a06:	d1e0      	bne.n	80069ca <_free_r+0x22>
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	4408      	add	r0, r1
 8006a0e:	6053      	str	r3, [r2, #4]
 8006a10:	6010      	str	r0, [r2, #0]
 8006a12:	e7da      	b.n	80069ca <_free_r+0x22>
 8006a14:	d902      	bls.n	8006a1c <_free_r+0x74>
 8006a16:	230c      	movs	r3, #12
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	e7d6      	b.n	80069ca <_free_r+0x22>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	1821      	adds	r1, r4, r0
 8006a20:	428b      	cmp	r3, r1
 8006a22:	bf02      	ittt	eq
 8006a24:	6819      	ldreq	r1, [r3, #0]
 8006a26:	685b      	ldreq	r3, [r3, #4]
 8006a28:	1809      	addeq	r1, r1, r0
 8006a2a:	6063      	str	r3, [r4, #4]
 8006a2c:	bf08      	it	eq
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	6054      	str	r4, [r2, #4]
 8006a32:	e7ca      	b.n	80069ca <_free_r+0x22>
 8006a34:	bd38      	pop	{r3, r4, r5, pc}
 8006a36:	bf00      	nop
 8006a38:	20000298 	.word	0x20000298

08006a3c <sbrk_aligned>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a7c <sbrk_aligned+0x40>)
 8006a40:	460c      	mov	r4, r1
 8006a42:	4605      	mov	r5, r0
 8006a44:	6831      	ldr	r1, [r6, #0]
 8006a46:	b911      	cbnz	r1, 8006a4e <sbrk_aligned+0x12>
 8006a48:	f000 fcba 	bl	80073c0 <_sbrk_r>
 8006a4c:	6030      	str	r0, [r6, #0]
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f000 fcb5 	bl	80073c0 <_sbrk_r>
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	d103      	bne.n	8006a62 <sbrk_aligned+0x26>
 8006a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a5e:	4620      	mov	r0, r4
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	1cc4      	adds	r4, r0, #3
 8006a64:	f024 0403 	bic.w	r4, r4, #3
 8006a68:	42a0      	cmp	r0, r4
 8006a6a:	d0f8      	beq.n	8006a5e <sbrk_aligned+0x22>
 8006a6c:	1a21      	subs	r1, r4, r0
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 fca6 	bl	80073c0 <_sbrk_r>
 8006a74:	3001      	adds	r0, #1
 8006a76:	d1f2      	bne.n	8006a5e <sbrk_aligned+0x22>
 8006a78:	e7ef      	b.n	8006a5a <sbrk_aligned+0x1e>
 8006a7a:	bf00      	nop
 8006a7c:	20000294 	.word	0x20000294

08006a80 <_malloc_r>:
 8006a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a84:	1ccd      	adds	r5, r1, #3
 8006a86:	4606      	mov	r6, r0
 8006a88:	f025 0503 	bic.w	r5, r5, #3
 8006a8c:	3508      	adds	r5, #8
 8006a8e:	2d0c      	cmp	r5, #12
 8006a90:	bf38      	it	cc
 8006a92:	250c      	movcc	r5, #12
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	db01      	blt.n	8006a9c <_malloc_r+0x1c>
 8006a98:	42a9      	cmp	r1, r5
 8006a9a:	d904      	bls.n	8006aa6 <_malloc_r+0x26>
 8006a9c:	230c      	movs	r3, #12
 8006a9e:	6033      	str	r3, [r6, #0]
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b7c <_malloc_r+0xfc>
 8006aaa:	f000 f869 	bl	8006b80 <__malloc_lock>
 8006aae:	f8d8 3000 	ldr.w	r3, [r8]
 8006ab2:	461c      	mov	r4, r3
 8006ab4:	bb44      	cbnz	r4, 8006b08 <_malloc_r+0x88>
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7ff ffbf 	bl	8006a3c <sbrk_aligned>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	d158      	bne.n	8006b76 <_malloc_r+0xf6>
 8006ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ac8:	4627      	mov	r7, r4
 8006aca:	2f00      	cmp	r7, #0
 8006acc:	d143      	bne.n	8006b56 <_malloc_r+0xd6>
 8006ace:	2c00      	cmp	r4, #0
 8006ad0:	d04b      	beq.n	8006b6a <_malloc_r+0xea>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	eb04 0903 	add.w	r9, r4, r3
 8006adc:	f000 fc70 	bl	80073c0 <_sbrk_r>
 8006ae0:	4581      	cmp	r9, r0
 8006ae2:	d142      	bne.n	8006b6a <_malloc_r+0xea>
 8006ae4:	6821      	ldr	r1, [r4, #0]
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	1a6d      	subs	r5, r5, r1
 8006aea:	4629      	mov	r1, r5
 8006aec:	f7ff ffa6 	bl	8006a3c <sbrk_aligned>
 8006af0:	3001      	adds	r0, #1
 8006af2:	d03a      	beq.n	8006b6a <_malloc_r+0xea>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	442b      	add	r3, r5
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	f8d8 3000 	ldr.w	r3, [r8]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	bb62      	cbnz	r2, 8006b5c <_malloc_r+0xdc>
 8006b02:	f8c8 7000 	str.w	r7, [r8]
 8006b06:	e00f      	b.n	8006b28 <_malloc_r+0xa8>
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	1b52      	subs	r2, r2, r5
 8006b0c:	d420      	bmi.n	8006b50 <_malloc_r+0xd0>
 8006b0e:	2a0b      	cmp	r2, #11
 8006b10:	d917      	bls.n	8006b42 <_malloc_r+0xc2>
 8006b12:	1961      	adds	r1, r4, r5
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	6025      	str	r5, [r4, #0]
 8006b18:	bf18      	it	ne
 8006b1a:	6059      	strne	r1, [r3, #4]
 8006b1c:	6863      	ldr	r3, [r4, #4]
 8006b1e:	bf08      	it	eq
 8006b20:	f8c8 1000 	streq.w	r1, [r8]
 8006b24:	5162      	str	r2, [r4, r5]
 8006b26:	604b      	str	r3, [r1, #4]
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f000 f82f 	bl	8006b8c <__malloc_unlock>
 8006b2e:	f104 000b 	add.w	r0, r4, #11
 8006b32:	1d23      	adds	r3, r4, #4
 8006b34:	f020 0007 	bic.w	r0, r0, #7
 8006b38:	1ac2      	subs	r2, r0, r3
 8006b3a:	bf1c      	itt	ne
 8006b3c:	1a1b      	subne	r3, r3, r0
 8006b3e:	50a3      	strne	r3, [r4, r2]
 8006b40:	e7af      	b.n	8006aa2 <_malloc_r+0x22>
 8006b42:	6862      	ldr	r2, [r4, #4]
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	bf0c      	ite	eq
 8006b48:	f8c8 2000 	streq.w	r2, [r8]
 8006b4c:	605a      	strne	r2, [r3, #4]
 8006b4e:	e7eb      	b.n	8006b28 <_malloc_r+0xa8>
 8006b50:	4623      	mov	r3, r4
 8006b52:	6864      	ldr	r4, [r4, #4]
 8006b54:	e7ae      	b.n	8006ab4 <_malloc_r+0x34>
 8006b56:	463c      	mov	r4, r7
 8006b58:	687f      	ldr	r7, [r7, #4]
 8006b5a:	e7b6      	b.n	8006aca <_malloc_r+0x4a>
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d1fb      	bne.n	8006b5c <_malloc_r+0xdc>
 8006b64:	2300      	movs	r3, #0
 8006b66:	6053      	str	r3, [r2, #4]
 8006b68:	e7de      	b.n	8006b28 <_malloc_r+0xa8>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	6033      	str	r3, [r6, #0]
 8006b70:	f000 f80c 	bl	8006b8c <__malloc_unlock>
 8006b74:	e794      	b.n	8006aa0 <_malloc_r+0x20>
 8006b76:	6005      	str	r5, [r0, #0]
 8006b78:	e7d6      	b.n	8006b28 <_malloc_r+0xa8>
 8006b7a:	bf00      	nop
 8006b7c:	20000298 	.word	0x20000298

08006b80 <__malloc_lock>:
 8006b80:	4801      	ldr	r0, [pc, #4]	@ (8006b88 <__malloc_lock+0x8>)
 8006b82:	f7ff bf0e 	b.w	80069a2 <__retarget_lock_acquire_recursive>
 8006b86:	bf00      	nop
 8006b88:	20000290 	.word	0x20000290

08006b8c <__malloc_unlock>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	@ (8006b94 <__malloc_unlock+0x8>)
 8006b8e:	f7ff bf09 	b.w	80069a4 <__retarget_lock_release_recursive>
 8006b92:	bf00      	nop
 8006b94:	20000290 	.word	0x20000290

08006b98 <__sfputc_r>:
 8006b98:	6893      	ldr	r3, [r2, #8]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	6093      	str	r3, [r2, #8]
 8006ba0:	b410      	push	{r4}
 8006ba2:	da08      	bge.n	8006bb6 <__sfputc_r+0x1e>
 8006ba4:	6994      	ldr	r4, [r2, #24]
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	db01      	blt.n	8006bae <__sfputc_r+0x16>
 8006baa:	290a      	cmp	r1, #10
 8006bac:	d103      	bne.n	8006bb6 <__sfputc_r+0x1e>
 8006bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bb2:	f000 bb71 	b.w	8007298 <__swbuf_r>
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	1c58      	adds	r0, r3, #1
 8006bba:	6010      	str	r0, [r2, #0]
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	7019      	strb	r1, [r3, #0]
 8006bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <__sfputs_r>:
 8006bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc8:	4606      	mov	r6, r0
 8006bca:	460f      	mov	r7, r1
 8006bcc:	4614      	mov	r4, r2
 8006bce:	18d5      	adds	r5, r2, r3
 8006bd0:	42ac      	cmp	r4, r5
 8006bd2:	d101      	bne.n	8006bd8 <__sfputs_r+0x12>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e007      	b.n	8006be8 <__sfputs_r+0x22>
 8006bd8:	463a      	mov	r2, r7
 8006bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7ff ffda 	bl	8006b98 <__sfputc_r>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d1f3      	bne.n	8006bd0 <__sfputs_r+0xa>
 8006be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bec <_vfiprintf_r>:
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	b09d      	sub	sp, #116	@ 0x74
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	4698      	mov	r8, r3
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	b118      	cbz	r0, 8006c04 <_vfiprintf_r+0x18>
 8006bfc:	6a03      	ldr	r3, [r0, #32]
 8006bfe:	b90b      	cbnz	r3, 8006c04 <_vfiprintf_r+0x18>
 8006c00:	f7ff fdca 	bl	8006798 <__sinit>
 8006c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c06:	07d9      	lsls	r1, r3, #31
 8006c08:	d405      	bmi.n	8006c16 <_vfiprintf_r+0x2a>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	059a      	lsls	r2, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_vfiprintf_r+0x2a>
 8006c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c12:	f7ff fec6 	bl	80069a2 <__retarget_lock_acquire_recursive>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	071b      	lsls	r3, r3, #28
 8006c1a:	d501      	bpl.n	8006c20 <_vfiprintf_r+0x34>
 8006c1c:	692b      	ldr	r3, [r5, #16]
 8006c1e:	b99b      	cbnz	r3, 8006c48 <_vfiprintf_r+0x5c>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 fb76 	bl	8007314 <__swsetup_r>
 8006c28:	b170      	cbz	r0, 8006c48 <_vfiprintf_r+0x5c>
 8006c2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c2c:	07dc      	lsls	r4, r3, #31
 8006c2e:	d504      	bpl.n	8006c3a <_vfiprintf_r+0x4e>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	b01d      	add	sp, #116	@ 0x74
 8006c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3a:	89ab      	ldrh	r3, [r5, #12]
 8006c3c:	0598      	lsls	r0, r3, #22
 8006c3e:	d4f7      	bmi.n	8006c30 <_vfiprintf_r+0x44>
 8006c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c42:	f7ff feaf 	bl	80069a4 <__retarget_lock_release_recursive>
 8006c46:	e7f3      	b.n	8006c30 <_vfiprintf_r+0x44>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c4e:	f04f 0901 	mov.w	r9, #1
 8006c52:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8006e08 <_vfiprintf_r+0x21c>
 8006c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c58:	2320      	movs	r3, #32
 8006c5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c5e:	2330      	movs	r3, #48	@ 0x30
 8006c60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c64:	4623      	mov	r3, r4
 8006c66:	469a      	mov	sl, r3
 8006c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c6c:	b10a      	cbz	r2, 8006c72 <_vfiprintf_r+0x86>
 8006c6e:	2a25      	cmp	r2, #37	@ 0x25
 8006c70:	d1f9      	bne.n	8006c66 <_vfiprintf_r+0x7a>
 8006c72:	ebba 0b04 	subs.w	fp, sl, r4
 8006c76:	d00b      	beq.n	8006c90 <_vfiprintf_r+0xa4>
 8006c78:	465b      	mov	r3, fp
 8006c7a:	4622      	mov	r2, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7ff ffa1 	bl	8006bc6 <__sfputs_r>
 8006c84:	3001      	adds	r0, #1
 8006c86:	f000 80a7 	beq.w	8006dd8 <_vfiprintf_r+0x1ec>
 8006c8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c8c:	445a      	add	r2, fp
 8006c8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c90:	f89a 3000 	ldrb.w	r3, [sl]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 809f 	beq.w	8006dd8 <_vfiprintf_r+0x1ec>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	f10a 0a01 	add.w	sl, sl, #1
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cac:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cb2:	4654      	mov	r4, sl
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	4854      	ldr	r0, [pc, #336]	@ (8006e08 <_vfiprintf_r+0x21c>)
 8006cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cbc:	f000 fb90 	bl	80073e0 <memchr>
 8006cc0:	9a04      	ldr	r2, [sp, #16]
 8006cc2:	b9d8      	cbnz	r0, 8006cfc <_vfiprintf_r+0x110>
 8006cc4:	06d1      	lsls	r1, r2, #27
 8006cc6:	bf44      	itt	mi
 8006cc8:	2320      	movmi	r3, #32
 8006cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cce:	0713      	lsls	r3, r2, #28
 8006cd0:	bf44      	itt	mi
 8006cd2:	232b      	movmi	r3, #43	@ 0x2b
 8006cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cde:	d015      	beq.n	8006d0c <_vfiprintf_r+0x120>
 8006ce0:	9a07      	ldr	r2, [sp, #28]
 8006ce2:	4654      	mov	r4, sl
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f04f 0c0a 	mov.w	ip, #10
 8006cea:	4621      	mov	r1, r4
 8006cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cf0:	3b30      	subs	r3, #48	@ 0x30
 8006cf2:	2b09      	cmp	r3, #9
 8006cf4:	d94b      	bls.n	8006d8e <_vfiprintf_r+0x1a2>
 8006cf6:	b1b0      	cbz	r0, 8006d26 <_vfiprintf_r+0x13a>
 8006cf8:	9207      	str	r2, [sp, #28]
 8006cfa:	e014      	b.n	8006d26 <_vfiprintf_r+0x13a>
 8006cfc:	eba0 0308 	sub.w	r3, r0, r8
 8006d00:	46a2      	mov	sl, r4
 8006d02:	fa09 f303 	lsl.w	r3, r9, r3
 8006d06:	4313      	orrs	r3, r2
 8006d08:	9304      	str	r3, [sp, #16]
 8006d0a:	e7d2      	b.n	8006cb2 <_vfiprintf_r+0xc6>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	1d19      	adds	r1, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	9103      	str	r1, [sp, #12]
 8006d16:	bfbb      	ittet	lt
 8006d18:	425b      	neglt	r3, r3
 8006d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d1e:	9307      	strge	r3, [sp, #28]
 8006d20:	9307      	strlt	r3, [sp, #28]
 8006d22:	bfb8      	it	lt
 8006d24:	9204      	strlt	r2, [sp, #16]
 8006d26:	7823      	ldrb	r3, [r4, #0]
 8006d28:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d2a:	d10a      	bne.n	8006d42 <_vfiprintf_r+0x156>
 8006d2c:	7863      	ldrb	r3, [r4, #1]
 8006d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d30:	d132      	bne.n	8006d98 <_vfiprintf_r+0x1ac>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	3402      	adds	r4, #2
 8006d36:	1d1a      	adds	r2, r3, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d3e:	9203      	str	r2, [sp, #12]
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e18 <_vfiprintf_r+0x22c>
 8006d46:	2203      	movs	r2, #3
 8006d48:	7821      	ldrb	r1, [r4, #0]
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	f000 fb48 	bl	80073e0 <memchr>
 8006d50:	b138      	cbz	r0, 8006d62 <_vfiprintf_r+0x176>
 8006d52:	eba0 000a 	sub.w	r0, r0, sl
 8006d56:	2240      	movs	r2, #64	@ 0x40
 8006d58:	9b04      	ldr	r3, [sp, #16]
 8006d5a:	3401      	adds	r4, #1
 8006d5c:	4082      	lsls	r2, r0
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d66:	2206      	movs	r2, #6
 8006d68:	4828      	ldr	r0, [pc, #160]	@ (8006e0c <_vfiprintf_r+0x220>)
 8006d6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d6e:	f000 fb37 	bl	80073e0 <memchr>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d03f      	beq.n	8006df6 <_vfiprintf_r+0x20a>
 8006d76:	4b26      	ldr	r3, [pc, #152]	@ (8006e10 <_vfiprintf_r+0x224>)
 8006d78:	bb1b      	cbnz	r3, 8006dc2 <_vfiprintf_r+0x1d6>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	3307      	adds	r3, #7
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	3308      	adds	r3, #8
 8006d84:	9303      	str	r3, [sp, #12]
 8006d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d88:	443b      	add	r3, r7
 8006d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d8c:	e76a      	b.n	8006c64 <_vfiprintf_r+0x78>
 8006d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d92:	460c      	mov	r4, r1
 8006d94:	2001      	movs	r0, #1
 8006d96:	e7a8      	b.n	8006cea <_vfiprintf_r+0xfe>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	f04f 0c0a 	mov.w	ip, #10
 8006da0:	4619      	mov	r1, r3
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	4620      	mov	r0, r4
 8006da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006daa:	3a30      	subs	r2, #48	@ 0x30
 8006dac:	2a09      	cmp	r2, #9
 8006dae:	d903      	bls.n	8006db8 <_vfiprintf_r+0x1cc>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0c6      	beq.n	8006d42 <_vfiprintf_r+0x156>
 8006db4:	9105      	str	r1, [sp, #20]
 8006db6:	e7c4      	b.n	8006d42 <_vfiprintf_r+0x156>
 8006db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7f0      	b.n	8006da4 <_vfiprintf_r+0x1b8>
 8006dc2:	ab03      	add	r3, sp, #12
 8006dc4:	462a      	mov	r2, r5
 8006dc6:	a904      	add	r1, sp, #16
 8006dc8:	4630      	mov	r0, r6
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4b11      	ldr	r3, [pc, #68]	@ (8006e14 <_vfiprintf_r+0x228>)
 8006dce:	f3af 8000 	nop.w
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	1c78      	adds	r0, r7, #1
 8006dd6:	d1d6      	bne.n	8006d86 <_vfiprintf_r+0x19a>
 8006dd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dda:	07d9      	lsls	r1, r3, #31
 8006ddc:	d405      	bmi.n	8006dea <_vfiprintf_r+0x1fe>
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	059a      	lsls	r2, r3, #22
 8006de2:	d402      	bmi.n	8006dea <_vfiprintf_r+0x1fe>
 8006de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006de6:	f7ff fddd 	bl	80069a4 <__retarget_lock_release_recursive>
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	065b      	lsls	r3, r3, #25
 8006dee:	f53f af1f 	bmi.w	8006c30 <_vfiprintf_r+0x44>
 8006df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006df4:	e71e      	b.n	8006c34 <_vfiprintf_r+0x48>
 8006df6:	ab03      	add	r3, sp, #12
 8006df8:	462a      	mov	r2, r5
 8006dfa:	a904      	add	r1, sp, #16
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	4b04      	ldr	r3, [pc, #16]	@ (8006e14 <_vfiprintf_r+0x228>)
 8006e02:	f000 f87d 	bl	8006f00 <_printf_i>
 8006e06:	e7e4      	b.n	8006dd2 <_vfiprintf_r+0x1e6>
 8006e08:	0800766c 	.word	0x0800766c
 8006e0c:	08007676 	.word	0x08007676
 8006e10:	00000000 	.word	0x00000000
 8006e14:	08006bc7 	.word	0x08006bc7
 8006e18:	08007672 	.word	0x08007672

08006e1c <_printf_common>:
 8006e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e20:	4616      	mov	r6, r2
 8006e22:	4698      	mov	r8, r3
 8006e24:	688a      	ldr	r2, [r1, #8]
 8006e26:	4607      	mov	r7, r0
 8006e28:	690b      	ldr	r3, [r1, #16]
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e30:	4293      	cmp	r3, r2
 8006e32:	bfb8      	it	lt
 8006e34:	4613      	movlt	r3, r2
 8006e36:	6033      	str	r3, [r6, #0]
 8006e38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e3c:	b10a      	cbz	r2, 8006e42 <_printf_common+0x26>
 8006e3e:	3301      	adds	r3, #1
 8006e40:	6033      	str	r3, [r6, #0]
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	0699      	lsls	r1, r3, #26
 8006e46:	bf42      	ittt	mi
 8006e48:	6833      	ldrmi	r3, [r6, #0]
 8006e4a:	3302      	addmi	r3, #2
 8006e4c:	6033      	strmi	r3, [r6, #0]
 8006e4e:	6825      	ldr	r5, [r4, #0]
 8006e50:	f015 0506 	ands.w	r5, r5, #6
 8006e54:	d106      	bne.n	8006e64 <_printf_common+0x48>
 8006e56:	f104 0a19 	add.w	sl, r4, #25
 8006e5a:	68e3      	ldr	r3, [r4, #12]
 8006e5c:	6832      	ldr	r2, [r6, #0]
 8006e5e:	1a9b      	subs	r3, r3, r2
 8006e60:	42ab      	cmp	r3, r5
 8006e62:	dc2b      	bgt.n	8006ebc <_printf_common+0xa0>
 8006e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	3b00      	subs	r3, #0
 8006e6c:	bf18      	it	ne
 8006e6e:	2301      	movne	r3, #1
 8006e70:	0692      	lsls	r2, r2, #26
 8006e72:	d430      	bmi.n	8006ed6 <_printf_common+0xba>
 8006e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e78:	4641      	mov	r1, r8
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	47c8      	blx	r9
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d023      	beq.n	8006eca <_printf_common+0xae>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	341a      	adds	r4, #26
 8006e86:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8006e8a:	f003 0306 	and.w	r3, r3, #6
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	bf0a      	itet	eq
 8006e92:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8006e96:	2500      	movne	r5, #0
 8006e98:	6833      	ldreq	r3, [r6, #0]
 8006e9a:	f04f 0600 	mov.w	r6, #0
 8006e9e:	bf08      	it	eq
 8006ea0:	1aed      	subeq	r5, r5, r3
 8006ea2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006ea6:	bf08      	it	eq
 8006ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eac:	4293      	cmp	r3, r2
 8006eae:	bfc4      	itt	gt
 8006eb0:	1a9b      	subgt	r3, r3, r2
 8006eb2:	18ed      	addgt	r5, r5, r3
 8006eb4:	42b5      	cmp	r5, r6
 8006eb6:	d11a      	bne.n	8006eee <_printf_common+0xd2>
 8006eb8:	2000      	movs	r0, #0
 8006eba:	e008      	b.n	8006ece <_printf_common+0xb2>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	4652      	mov	r2, sl
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c8      	blx	r9
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d103      	bne.n	8006ed2 <_printf_common+0xb6>
 8006eca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed2:	3501      	adds	r5, #1
 8006ed4:	e7c1      	b.n	8006e5a <_printf_common+0x3e>
 8006ed6:	18e1      	adds	r1, r4, r3
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	2030      	movs	r0, #48	@ 0x30
 8006edc:	3302      	adds	r3, #2
 8006ede:	4422      	add	r2, r4
 8006ee0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ee8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006eec:	e7c2      	b.n	8006e74 <_printf_common+0x58>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	4641      	mov	r1, r8
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	47c8      	blx	r9
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d0e6      	beq.n	8006eca <_printf_common+0xae>
 8006efc:	3601      	adds	r6, #1
 8006efe:	e7d9      	b.n	8006eb4 <_printf_common+0x98>

08006f00 <_printf_i>:
 8006f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	7e0f      	ldrb	r7, [r1, #24]
 8006f06:	4691      	mov	r9, r2
 8006f08:	4680      	mov	r8, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	2f78      	cmp	r7, #120	@ 0x78
 8006f0e:	469a      	mov	sl, r3
 8006f10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f16:	d807      	bhi.n	8006f28 <_printf_i+0x28>
 8006f18:	2f62      	cmp	r7, #98	@ 0x62
 8006f1a:	d80a      	bhi.n	8006f32 <_printf_i+0x32>
 8006f1c:	2f00      	cmp	r7, #0
 8006f1e:	f000 80d2 	beq.w	80070c6 <_printf_i+0x1c6>
 8006f22:	2f58      	cmp	r7, #88	@ 0x58
 8006f24:	f000 80b9 	beq.w	800709a <_printf_i+0x19a>
 8006f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f30:	e03a      	b.n	8006fa8 <_printf_i+0xa8>
 8006f32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f36:	2b15      	cmp	r3, #21
 8006f38:	d8f6      	bhi.n	8006f28 <_printf_i+0x28>
 8006f3a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f40 <_printf_i+0x40>)
 8006f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f40:	08006f99 	.word	0x08006f99
 8006f44:	08006fad 	.word	0x08006fad
 8006f48:	08006f29 	.word	0x08006f29
 8006f4c:	08006f29 	.word	0x08006f29
 8006f50:	08006f29 	.word	0x08006f29
 8006f54:	08006f29 	.word	0x08006f29
 8006f58:	08006fad 	.word	0x08006fad
 8006f5c:	08006f29 	.word	0x08006f29
 8006f60:	08006f29 	.word	0x08006f29
 8006f64:	08006f29 	.word	0x08006f29
 8006f68:	08006f29 	.word	0x08006f29
 8006f6c:	080070ad 	.word	0x080070ad
 8006f70:	08006fd7 	.word	0x08006fd7
 8006f74:	08007067 	.word	0x08007067
 8006f78:	08006f29 	.word	0x08006f29
 8006f7c:	08006f29 	.word	0x08006f29
 8006f80:	080070cf 	.word	0x080070cf
 8006f84:	08006f29 	.word	0x08006f29
 8006f88:	08006fd7 	.word	0x08006fd7
 8006f8c:	08006f29 	.word	0x08006f29
 8006f90:	08006f29 	.word	0x08006f29
 8006f94:	0800706f 	.word	0x0800706f
 8006f98:	6833      	ldr	r3, [r6, #0]
 8006f9a:	1d1a      	adds	r2, r3, #4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6032      	str	r2, [r6, #0]
 8006fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e09d      	b.n	80070e8 <_printf_i+0x1e8>
 8006fac:	6833      	ldr	r3, [r6, #0]
 8006fae:	6820      	ldr	r0, [r4, #0]
 8006fb0:	1d19      	adds	r1, r3, #4
 8006fb2:	6031      	str	r1, [r6, #0]
 8006fb4:	0606      	lsls	r6, r0, #24
 8006fb6:	d501      	bpl.n	8006fbc <_printf_i+0xbc>
 8006fb8:	681d      	ldr	r5, [r3, #0]
 8006fba:	e003      	b.n	8006fc4 <_printf_i+0xc4>
 8006fbc:	0645      	lsls	r5, r0, #25
 8006fbe:	d5fb      	bpl.n	8006fb8 <_printf_i+0xb8>
 8006fc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	da03      	bge.n	8006fd0 <_printf_i+0xd0>
 8006fc8:	232d      	movs	r3, #45	@ 0x2d
 8006fca:	426d      	negs	r5, r5
 8006fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fd0:	4859      	ldr	r0, [pc, #356]	@ (8007138 <_printf_i+0x238>)
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	e011      	b.n	8006ffa <_printf_i+0xfa>
 8006fd6:	6821      	ldr	r1, [r4, #0]
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	0608      	lsls	r0, r1, #24
 8006fdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fe0:	d402      	bmi.n	8006fe8 <_printf_i+0xe8>
 8006fe2:	0649      	lsls	r1, r1, #25
 8006fe4:	bf48      	it	mi
 8006fe6:	b2ad      	uxthmi	r5, r5
 8006fe8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	4852      	ldr	r0, [pc, #328]	@ (8007138 <_printf_i+0x238>)
 8006fee:	bf14      	ite	ne
 8006ff0:	230a      	movne	r3, #10
 8006ff2:	2308      	moveq	r3, #8
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ffa:	6866      	ldr	r6, [r4, #4]
 8006ffc:	2e00      	cmp	r6, #0
 8006ffe:	60a6      	str	r6, [r4, #8]
 8007000:	bfa2      	ittt	ge
 8007002:	6821      	ldrge	r1, [r4, #0]
 8007004:	f021 0104 	bicge.w	r1, r1, #4
 8007008:	6021      	strge	r1, [r4, #0]
 800700a:	b90d      	cbnz	r5, 8007010 <_printf_i+0x110>
 800700c:	2e00      	cmp	r6, #0
 800700e:	d04b      	beq.n	80070a8 <_printf_i+0x1a8>
 8007010:	4616      	mov	r6, r2
 8007012:	fbb5 f1f3 	udiv	r1, r5, r3
 8007016:	fb03 5711 	mls	r7, r3, r1, r5
 800701a:	5dc7      	ldrb	r7, [r0, r7]
 800701c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007020:	462f      	mov	r7, r5
 8007022:	460d      	mov	r5, r1
 8007024:	42bb      	cmp	r3, r7
 8007026:	d9f4      	bls.n	8007012 <_printf_i+0x112>
 8007028:	2b08      	cmp	r3, #8
 800702a:	d10b      	bne.n	8007044 <_printf_i+0x144>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	07df      	lsls	r7, r3, #31
 8007030:	d508      	bpl.n	8007044 <_printf_i+0x144>
 8007032:	6923      	ldr	r3, [r4, #16]
 8007034:	6861      	ldr	r1, [r4, #4]
 8007036:	4299      	cmp	r1, r3
 8007038:	bfde      	ittt	le
 800703a:	2330      	movle	r3, #48	@ 0x30
 800703c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007040:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007044:	1b92      	subs	r2, r2, r6
 8007046:	6122      	str	r2, [r4, #16]
 8007048:	464b      	mov	r3, r9
 800704a:	aa03      	add	r2, sp, #12
 800704c:	4621      	mov	r1, r4
 800704e:	4640      	mov	r0, r8
 8007050:	f8cd a000 	str.w	sl, [sp]
 8007054:	f7ff fee2 	bl	8006e1c <_printf_common>
 8007058:	3001      	adds	r0, #1
 800705a:	d14a      	bne.n	80070f2 <_printf_i+0x1f2>
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	b004      	add	sp, #16
 8007062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	f043 0320 	orr.w	r3, r3, #32
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	2778      	movs	r7, #120	@ 0x78
 8007070:	4832      	ldr	r0, [pc, #200]	@ (800713c <_printf_i+0x23c>)
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007078:	061f      	lsls	r7, r3, #24
 800707a:	6831      	ldr	r1, [r6, #0]
 800707c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007080:	d402      	bmi.n	8007088 <_printf_i+0x188>
 8007082:	065f      	lsls	r7, r3, #25
 8007084:	bf48      	it	mi
 8007086:	b2ad      	uxthmi	r5, r5
 8007088:	6031      	str	r1, [r6, #0]
 800708a:	07d9      	lsls	r1, r3, #31
 800708c:	bf44      	itt	mi
 800708e:	f043 0320 	orrmi.w	r3, r3, #32
 8007092:	6023      	strmi	r3, [r4, #0]
 8007094:	b11d      	cbz	r5, 800709e <_printf_i+0x19e>
 8007096:	2310      	movs	r3, #16
 8007098:	e7ac      	b.n	8006ff4 <_printf_i+0xf4>
 800709a:	4827      	ldr	r0, [pc, #156]	@ (8007138 <_printf_i+0x238>)
 800709c:	e7e9      	b.n	8007072 <_printf_i+0x172>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	f023 0320 	bic.w	r3, r3, #32
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	e7f6      	b.n	8007096 <_printf_i+0x196>
 80070a8:	4616      	mov	r6, r2
 80070aa:	e7bd      	b.n	8007028 <_printf_i+0x128>
 80070ac:	6833      	ldr	r3, [r6, #0]
 80070ae:	6825      	ldr	r5, [r4, #0]
 80070b0:	1d18      	adds	r0, r3, #4
 80070b2:	6961      	ldr	r1, [r4, #20]
 80070b4:	6030      	str	r0, [r6, #0]
 80070b6:	062e      	lsls	r6, r5, #24
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	d501      	bpl.n	80070c0 <_printf_i+0x1c0>
 80070bc:	6019      	str	r1, [r3, #0]
 80070be:	e002      	b.n	80070c6 <_printf_i+0x1c6>
 80070c0:	0668      	lsls	r0, r5, #25
 80070c2:	d5fb      	bpl.n	80070bc <_printf_i+0x1bc>
 80070c4:	8019      	strh	r1, [r3, #0]
 80070c6:	2300      	movs	r3, #0
 80070c8:	4616      	mov	r6, r2
 80070ca:	6123      	str	r3, [r4, #16]
 80070cc:	e7bc      	b.n	8007048 <_printf_i+0x148>
 80070ce:	6833      	ldr	r3, [r6, #0]
 80070d0:	2100      	movs	r1, #0
 80070d2:	1d1a      	adds	r2, r3, #4
 80070d4:	6032      	str	r2, [r6, #0]
 80070d6:	681e      	ldr	r6, [r3, #0]
 80070d8:	6862      	ldr	r2, [r4, #4]
 80070da:	4630      	mov	r0, r6
 80070dc:	f000 f980 	bl	80073e0 <memchr>
 80070e0:	b108      	cbz	r0, 80070e6 <_printf_i+0x1e6>
 80070e2:	1b80      	subs	r0, r0, r6
 80070e4:	6060      	str	r0, [r4, #4]
 80070e6:	6863      	ldr	r3, [r4, #4]
 80070e8:	6123      	str	r3, [r4, #16]
 80070ea:	2300      	movs	r3, #0
 80070ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070f0:	e7aa      	b.n	8007048 <_printf_i+0x148>
 80070f2:	6923      	ldr	r3, [r4, #16]
 80070f4:	4632      	mov	r2, r6
 80070f6:	4649      	mov	r1, r9
 80070f8:	4640      	mov	r0, r8
 80070fa:	47d0      	blx	sl
 80070fc:	3001      	adds	r0, #1
 80070fe:	d0ad      	beq.n	800705c <_printf_i+0x15c>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	079b      	lsls	r3, r3, #30
 8007104:	d413      	bmi.n	800712e <_printf_i+0x22e>
 8007106:	68e0      	ldr	r0, [r4, #12]
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	4298      	cmp	r0, r3
 800710c:	bfb8      	it	lt
 800710e:	4618      	movlt	r0, r3
 8007110:	e7a6      	b.n	8007060 <_printf_i+0x160>
 8007112:	2301      	movs	r3, #1
 8007114:	4632      	mov	r2, r6
 8007116:	4649      	mov	r1, r9
 8007118:	4640      	mov	r0, r8
 800711a:	47d0      	blx	sl
 800711c:	3001      	adds	r0, #1
 800711e:	d09d      	beq.n	800705c <_printf_i+0x15c>
 8007120:	3501      	adds	r5, #1
 8007122:	68e3      	ldr	r3, [r4, #12]
 8007124:	9903      	ldr	r1, [sp, #12]
 8007126:	1a5b      	subs	r3, r3, r1
 8007128:	42ab      	cmp	r3, r5
 800712a:	dcf2      	bgt.n	8007112 <_printf_i+0x212>
 800712c:	e7eb      	b.n	8007106 <_printf_i+0x206>
 800712e:	2500      	movs	r5, #0
 8007130:	f104 0619 	add.w	r6, r4, #25
 8007134:	e7f5      	b.n	8007122 <_printf_i+0x222>
 8007136:	bf00      	nop
 8007138:	0800767d 	.word	0x0800767d
 800713c:	0800768e 	.word	0x0800768e

08007140 <__sflush_r>:
 8007140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007148:	0716      	lsls	r6, r2, #28
 800714a:	4605      	mov	r5, r0
 800714c:	460c      	mov	r4, r1
 800714e:	d454      	bmi.n	80071fa <__sflush_r+0xba>
 8007150:	684b      	ldr	r3, [r1, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	dc02      	bgt.n	800715c <__sflush_r+0x1c>
 8007156:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	dd48      	ble.n	80071ee <__sflush_r+0xae>
 800715c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800715e:	2e00      	cmp	r6, #0
 8007160:	d045      	beq.n	80071ee <__sflush_r+0xae>
 8007162:	2300      	movs	r3, #0
 8007164:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007168:	682f      	ldr	r7, [r5, #0]
 800716a:	6a21      	ldr	r1, [r4, #32]
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	d030      	beq.n	80071d2 <__sflush_r+0x92>
 8007170:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	0759      	lsls	r1, r3, #29
 8007176:	d505      	bpl.n	8007184 <__sflush_r+0x44>
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	1ad2      	subs	r2, r2, r3
 800717c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800717e:	b10b      	cbz	r3, 8007184 <__sflush_r+0x44>
 8007180:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007182:	1ad2      	subs	r2, r2, r3
 8007184:	2300      	movs	r3, #0
 8007186:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007188:	6a21      	ldr	r1, [r4, #32]
 800718a:	4628      	mov	r0, r5
 800718c:	47b0      	blx	r6
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	d106      	bne.n	80071a2 <__sflush_r+0x62>
 8007194:	6829      	ldr	r1, [r5, #0]
 8007196:	291d      	cmp	r1, #29
 8007198:	d82b      	bhi.n	80071f2 <__sflush_r+0xb2>
 800719a:	4a2a      	ldr	r2, [pc, #168]	@ (8007244 <__sflush_r+0x104>)
 800719c:	410a      	asrs	r2, r1
 800719e:	07d6      	lsls	r6, r2, #31
 80071a0:	d427      	bmi.n	80071f2 <__sflush_r+0xb2>
 80071a2:	2200      	movs	r2, #0
 80071a4:	04d9      	lsls	r1, r3, #19
 80071a6:	6062      	str	r2, [r4, #4]
 80071a8:	6922      	ldr	r2, [r4, #16]
 80071aa:	6022      	str	r2, [r4, #0]
 80071ac:	d504      	bpl.n	80071b8 <__sflush_r+0x78>
 80071ae:	1c42      	adds	r2, r0, #1
 80071b0:	d101      	bne.n	80071b6 <__sflush_r+0x76>
 80071b2:	682b      	ldr	r3, [r5, #0]
 80071b4:	b903      	cbnz	r3, 80071b8 <__sflush_r+0x78>
 80071b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80071b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071ba:	602f      	str	r7, [r5, #0]
 80071bc:	b1b9      	cbz	r1, 80071ee <__sflush_r+0xae>
 80071be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071c2:	4299      	cmp	r1, r3
 80071c4:	d002      	beq.n	80071cc <__sflush_r+0x8c>
 80071c6:	4628      	mov	r0, r5
 80071c8:	f7ff fbee 	bl	80069a8 <_free_r>
 80071cc:	2300      	movs	r3, #0
 80071ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80071d0:	e00d      	b.n	80071ee <__sflush_r+0xae>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b0      	blx	r6
 80071d8:	4602      	mov	r2, r0
 80071da:	1c50      	adds	r0, r2, #1
 80071dc:	d1c9      	bne.n	8007172 <__sflush_r+0x32>
 80071de:	682b      	ldr	r3, [r5, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0c6      	beq.n	8007172 <__sflush_r+0x32>
 80071e4:	2b1d      	cmp	r3, #29
 80071e6:	d001      	beq.n	80071ec <__sflush_r+0xac>
 80071e8:	2b16      	cmp	r3, #22
 80071ea:	d11d      	bne.n	8007228 <__sflush_r+0xe8>
 80071ec:	602f      	str	r7, [r5, #0]
 80071ee:	2000      	movs	r0, #0
 80071f0:	e021      	b.n	8007236 <__sflush_r+0xf6>
 80071f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071f6:	b21b      	sxth	r3, r3
 80071f8:	e01a      	b.n	8007230 <__sflush_r+0xf0>
 80071fa:	690f      	ldr	r7, [r1, #16]
 80071fc:	2f00      	cmp	r7, #0
 80071fe:	d0f6      	beq.n	80071ee <__sflush_r+0xae>
 8007200:	0793      	lsls	r3, r2, #30
 8007202:	680e      	ldr	r6, [r1, #0]
 8007204:	600f      	str	r7, [r1, #0]
 8007206:	bf0c      	ite	eq
 8007208:	694b      	ldreq	r3, [r1, #20]
 800720a:	2300      	movne	r3, #0
 800720c:	eba6 0807 	sub.w	r8, r6, r7
 8007210:	608b      	str	r3, [r1, #8]
 8007212:	f1b8 0f00 	cmp.w	r8, #0
 8007216:	ddea      	ble.n	80071ee <__sflush_r+0xae>
 8007218:	4643      	mov	r3, r8
 800721a:	463a      	mov	r2, r7
 800721c:	6a21      	ldr	r1, [r4, #32]
 800721e:	4628      	mov	r0, r5
 8007220:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007222:	47b0      	blx	r6
 8007224:	2800      	cmp	r0, #0
 8007226:	dc08      	bgt.n	800723a <__sflush_r+0xfa>
 8007228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800722c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723a:	4407      	add	r7, r0
 800723c:	eba8 0800 	sub.w	r8, r8, r0
 8007240:	e7e7      	b.n	8007212 <__sflush_r+0xd2>
 8007242:	bf00      	nop
 8007244:	dfbffffe 	.word	0xdfbffffe

08007248 <_fflush_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	690b      	ldr	r3, [r1, #16]
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	b913      	cbnz	r3, 8007258 <_fflush_r+0x10>
 8007252:	2500      	movs	r5, #0
 8007254:	4628      	mov	r0, r5
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	b118      	cbz	r0, 8007262 <_fflush_r+0x1a>
 800725a:	6a03      	ldr	r3, [r0, #32]
 800725c:	b90b      	cbnz	r3, 8007262 <_fflush_r+0x1a>
 800725e:	f7ff fa9b 	bl	8006798 <__sinit>
 8007262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0f3      	beq.n	8007252 <_fflush_r+0xa>
 800726a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800726c:	07d0      	lsls	r0, r2, #31
 800726e:	d404      	bmi.n	800727a <_fflush_r+0x32>
 8007270:	0599      	lsls	r1, r3, #22
 8007272:	d402      	bmi.n	800727a <_fflush_r+0x32>
 8007274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007276:	f7ff fb94 	bl	80069a2 <__retarget_lock_acquire_recursive>
 800727a:	4628      	mov	r0, r5
 800727c:	4621      	mov	r1, r4
 800727e:	f7ff ff5f 	bl	8007140 <__sflush_r>
 8007282:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007284:	4605      	mov	r5, r0
 8007286:	07da      	lsls	r2, r3, #31
 8007288:	d4e4      	bmi.n	8007254 <_fflush_r+0xc>
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	059b      	lsls	r3, r3, #22
 800728e:	d4e1      	bmi.n	8007254 <_fflush_r+0xc>
 8007290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007292:	f7ff fb87 	bl	80069a4 <__retarget_lock_release_recursive>
 8007296:	e7dd      	b.n	8007254 <_fflush_r+0xc>

08007298 <__swbuf_r>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	460e      	mov	r6, r1
 800729c:	4614      	mov	r4, r2
 800729e:	4605      	mov	r5, r0
 80072a0:	b118      	cbz	r0, 80072aa <__swbuf_r+0x12>
 80072a2:	6a03      	ldr	r3, [r0, #32]
 80072a4:	b90b      	cbnz	r3, 80072aa <__swbuf_r+0x12>
 80072a6:	f7ff fa77 	bl	8006798 <__sinit>
 80072aa:	69a3      	ldr	r3, [r4, #24]
 80072ac:	60a3      	str	r3, [r4, #8]
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	071a      	lsls	r2, r3, #28
 80072b2:	d501      	bpl.n	80072b8 <__swbuf_r+0x20>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	b943      	cbnz	r3, 80072ca <__swbuf_r+0x32>
 80072b8:	4621      	mov	r1, r4
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 f82a 	bl	8007314 <__swsetup_r>
 80072c0:	b118      	cbz	r0, 80072ca <__swbuf_r+0x32>
 80072c2:	f04f 37ff 	mov.w	r7, #4294967295
 80072c6:	4638      	mov	r0, r7
 80072c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	b2f6      	uxtb	r6, r6
 80072ce:	6922      	ldr	r2, [r4, #16]
 80072d0:	4637      	mov	r7, r6
 80072d2:	1a98      	subs	r0, r3, r2
 80072d4:	6963      	ldr	r3, [r4, #20]
 80072d6:	4283      	cmp	r3, r0
 80072d8:	dc05      	bgt.n	80072e6 <__swbuf_r+0x4e>
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	f7ff ffb3 	bl	8007248 <_fflush_r>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d1ed      	bne.n	80072c2 <__swbuf_r+0x2a>
 80072e6:	68a3      	ldr	r3, [r4, #8]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	60a3      	str	r3, [r4, #8]
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	701e      	strb	r6, [r3, #0]
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	6962      	ldr	r2, [r4, #20]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d004      	beq.n	8007306 <__swbuf_r+0x6e>
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	07db      	lsls	r3, r3, #31
 8007300:	d5e1      	bpl.n	80072c6 <__swbuf_r+0x2e>
 8007302:	2e0a      	cmp	r6, #10
 8007304:	d1df      	bne.n	80072c6 <__swbuf_r+0x2e>
 8007306:	4621      	mov	r1, r4
 8007308:	4628      	mov	r0, r5
 800730a:	f7ff ff9d 	bl	8007248 <_fflush_r>
 800730e:	2800      	cmp	r0, #0
 8007310:	d0d9      	beq.n	80072c6 <__swbuf_r+0x2e>
 8007312:	e7d6      	b.n	80072c2 <__swbuf_r+0x2a>

08007314 <__swsetup_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4b29      	ldr	r3, [pc, #164]	@ (80073bc <__swsetup_r+0xa8>)
 8007318:	4605      	mov	r5, r0
 800731a:	460c      	mov	r4, r1
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	b118      	cbz	r0, 8007328 <__swsetup_r+0x14>
 8007320:	6a03      	ldr	r3, [r0, #32]
 8007322:	b90b      	cbnz	r3, 8007328 <__swsetup_r+0x14>
 8007324:	f7ff fa38 	bl	8006798 <__sinit>
 8007328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732c:	0719      	lsls	r1, r3, #28
 800732e:	d422      	bmi.n	8007376 <__swsetup_r+0x62>
 8007330:	06da      	lsls	r2, r3, #27
 8007332:	d407      	bmi.n	8007344 <__swsetup_r+0x30>
 8007334:	2209      	movs	r2, #9
 8007336:	602a      	str	r2, [r5, #0]
 8007338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	e033      	b.n	80073ac <__swsetup_r+0x98>
 8007344:	0758      	lsls	r0, r3, #29
 8007346:	d512      	bpl.n	800736e <__swsetup_r+0x5a>
 8007348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800734a:	b141      	cbz	r1, 800735e <__swsetup_r+0x4a>
 800734c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007350:	4299      	cmp	r1, r3
 8007352:	d002      	beq.n	800735a <__swsetup_r+0x46>
 8007354:	4628      	mov	r0, r5
 8007356:	f7ff fb27 	bl	80069a8 <_free_r>
 800735a:	2300      	movs	r3, #0
 800735c:	6363      	str	r3, [r4, #52]	@ 0x34
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	2300      	movs	r3, #0
 8007368:	6063      	str	r3, [r4, #4]
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f043 0308 	orr.w	r3, r3, #8
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	b94b      	cbnz	r3, 800738e <__swsetup_r+0x7a>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007384:	d003      	beq.n	800738e <__swsetup_r+0x7a>
 8007386:	4621      	mov	r1, r4
 8007388:	4628      	mov	r0, r5
 800738a:	f000 f85c 	bl	8007446 <__smakebuf_r>
 800738e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007392:	f013 0201 	ands.w	r2, r3, #1
 8007396:	d00a      	beq.n	80073ae <__swsetup_r+0x9a>
 8007398:	2200      	movs	r2, #0
 800739a:	60a2      	str	r2, [r4, #8]
 800739c:	6962      	ldr	r2, [r4, #20]
 800739e:	4252      	negs	r2, r2
 80073a0:	61a2      	str	r2, [r4, #24]
 80073a2:	6922      	ldr	r2, [r4, #16]
 80073a4:	b942      	cbnz	r2, 80073b8 <__swsetup_r+0xa4>
 80073a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073aa:	d1c5      	bne.n	8007338 <__swsetup_r+0x24>
 80073ac:	bd38      	pop	{r3, r4, r5, pc}
 80073ae:	0799      	lsls	r1, r3, #30
 80073b0:	bf58      	it	pl
 80073b2:	6962      	ldrpl	r2, [r4, #20]
 80073b4:	60a2      	str	r2, [r4, #8]
 80073b6:	e7f4      	b.n	80073a2 <__swsetup_r+0x8e>
 80073b8:	2000      	movs	r0, #0
 80073ba:	e7f7      	b.n	80073ac <__swsetup_r+0x98>
 80073bc:	20000018 	.word	0x20000018

080073c0 <_sbrk_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	2300      	movs	r3, #0
 80073c4:	4d05      	ldr	r5, [pc, #20]	@ (80073dc <_sbrk_r+0x1c>)
 80073c6:	4604      	mov	r4, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	f7f9 fc26 	bl	8000c1c <_sbrk>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d102      	bne.n	80073da <_sbrk_r+0x1a>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	b103      	cbz	r3, 80073da <_sbrk_r+0x1a>
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	bd38      	pop	{r3, r4, r5, pc}
 80073dc:	2000028c 	.word	0x2000028c

080073e0 <memchr>:
 80073e0:	b2c9      	uxtb	r1, r1
 80073e2:	4603      	mov	r3, r0
 80073e4:	4402      	add	r2, r0
 80073e6:	b510      	push	{r4, lr}
 80073e8:	4293      	cmp	r3, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	d101      	bne.n	80073f2 <memchr+0x12>
 80073ee:	2000      	movs	r0, #0
 80073f0:	e003      	b.n	80073fa <memchr+0x1a>
 80073f2:	7804      	ldrb	r4, [r0, #0]
 80073f4:	3301      	adds	r3, #1
 80073f6:	428c      	cmp	r4, r1
 80073f8:	d1f6      	bne.n	80073e8 <memchr+0x8>
 80073fa:	bd10      	pop	{r4, pc}

080073fc <__swhatbuf_r>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	460c      	mov	r4, r1
 8007400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007404:	b096      	sub	sp, #88	@ 0x58
 8007406:	4615      	mov	r5, r2
 8007408:	2900      	cmp	r1, #0
 800740a:	461e      	mov	r6, r3
 800740c:	da0c      	bge.n	8007428 <__swhatbuf_r+0x2c>
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	2100      	movs	r1, #0
 8007412:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007416:	bf14      	ite	ne
 8007418:	2340      	movne	r3, #64	@ 0x40
 800741a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800741e:	2000      	movs	r0, #0
 8007420:	6031      	str	r1, [r6, #0]
 8007422:	602b      	str	r3, [r5, #0]
 8007424:	b016      	add	sp, #88	@ 0x58
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	466a      	mov	r2, sp
 800742a:	f000 f849 	bl	80074c0 <_fstat_r>
 800742e:	2800      	cmp	r0, #0
 8007430:	dbed      	blt.n	800740e <__swhatbuf_r+0x12>
 8007432:	9901      	ldr	r1, [sp, #4]
 8007434:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007438:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800743c:	4259      	negs	r1, r3
 800743e:	4159      	adcs	r1, r3
 8007440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007444:	e7eb      	b.n	800741e <__swhatbuf_r+0x22>

08007446 <__smakebuf_r>:
 8007446:	898b      	ldrh	r3, [r1, #12]
 8007448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800744a:	079d      	lsls	r5, r3, #30
 800744c:	4606      	mov	r6, r0
 800744e:	460c      	mov	r4, r1
 8007450:	d507      	bpl.n	8007462 <__smakebuf_r+0x1c>
 8007452:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	6123      	str	r3, [r4, #16]
 800745a:	2301      	movs	r3, #1
 800745c:	6163      	str	r3, [r4, #20]
 800745e:	b003      	add	sp, #12
 8007460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007462:	ab01      	add	r3, sp, #4
 8007464:	466a      	mov	r2, sp
 8007466:	f7ff ffc9 	bl	80073fc <__swhatbuf_r>
 800746a:	9f00      	ldr	r7, [sp, #0]
 800746c:	4605      	mov	r5, r0
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
 8007472:	f7ff fb05 	bl	8006a80 <_malloc_r>
 8007476:	b948      	cbnz	r0, 800748c <__smakebuf_r+0x46>
 8007478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800747c:	059a      	lsls	r2, r3, #22
 800747e:	d4ee      	bmi.n	800745e <__smakebuf_r+0x18>
 8007480:	f023 0303 	bic.w	r3, r3, #3
 8007484:	f043 0302 	orr.w	r3, r3, #2
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	e7e2      	b.n	8007452 <__smakebuf_r+0xc>
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	6020      	str	r0, [r4, #0]
 8007490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	9b01      	ldr	r3, [sp, #4]
 8007498:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800749c:	b15b      	cbz	r3, 80074b6 <__smakebuf_r+0x70>
 800749e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074a2:	4630      	mov	r0, r6
 80074a4:	f000 f81e 	bl	80074e4 <_isatty_r>
 80074a8:	b128      	cbz	r0, 80074b6 <__smakebuf_r+0x70>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	f043 0301 	orr.w	r3, r3, #1
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	431d      	orrs	r5, r3
 80074ba:	81a5      	strh	r5, [r4, #12]
 80074bc:	e7cf      	b.n	800745e <__smakebuf_r+0x18>
	...

080074c0 <_fstat_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	2300      	movs	r3, #0
 80074c4:	4d06      	ldr	r5, [pc, #24]	@ (80074e0 <_fstat_r+0x20>)
 80074c6:	4604      	mov	r4, r0
 80074c8:	4608      	mov	r0, r1
 80074ca:	4611      	mov	r1, r2
 80074cc:	602b      	str	r3, [r5, #0]
 80074ce:	f7f9 fb7d 	bl	8000bcc <_fstat>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d102      	bne.n	80074dc <_fstat_r+0x1c>
 80074d6:	682b      	ldr	r3, [r5, #0]
 80074d8:	b103      	cbz	r3, 80074dc <_fstat_r+0x1c>
 80074da:	6023      	str	r3, [r4, #0]
 80074dc:	bd38      	pop	{r3, r4, r5, pc}
 80074de:	bf00      	nop
 80074e0:	2000028c 	.word	0x2000028c

080074e4 <_isatty_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	2300      	movs	r3, #0
 80074e8:	4d05      	ldr	r5, [pc, #20]	@ (8007500 <_isatty_r+0x1c>)
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	f7f9 fb7c 	bl	8000bec <_isatty>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_isatty_r+0x1a>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_isatty_r+0x1a>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	2000028c 	.word	0x2000028c

08007504 <_init>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	bf00      	nop
 8007508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750a:	bc08      	pop	{r3}
 800750c:	469e      	mov	lr, r3
 800750e:	4770      	bx	lr

08007510 <_fini>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr
